import os
import asyncio
import random
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv

# ---------- Load environment ----------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
waiting_for_nick = set()

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"), KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

top_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"), KeyboardButton(text="üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)

forge_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞"), KeyboardButton(text="üî® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)

# ---------- –ö–ª–∞–Ω—ã ----------
CLANS = {
    "–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏ üåå": "üõ° <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî ...",
    "–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏ üî•": "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî ...",
    "–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏ üåë": "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî ...",
    "–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏ üéµ": "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî ..."
}

# ---------- –õ–æ–∫–∞—Ü–∏–∏ ----------
ADVENTURES = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {
        "description": "üå≤ –ì—É—Å—Ç–æ–π, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ—Å, –æ–∫—É—Ç–∞–Ω–Ω—ã–π —Ç—É–º–∞–Ω–æ–º...",
        "mobs": ["–¢—É–º–∞–Ω–Ω—ã–π –í–æ–ª–∫", "–î—Ä–µ–≤–µ—Å–Ω—ã–π –°—Ç—Ä–∞–∂", "–õ–µ—Å–Ω–æ–π –ñ—É—Ç–µ–Ω—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –û–ª–µ–Ω—å", "–ö–æ—Ä–Ω–µ–ø–ª–µ—Ç"]
    },
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {
        "description": "üèöÔ∏è –ü—Ä–æ–∫–ª—è—Ç–∞—è –¥–µ—Ä–µ–≤–Ω—è, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∂—É—Ç–∫–∏–º–∏ —Ç–µ–Ω—è–º–∏...",
        "mobs": ["–ë–µ–∑–≥–ª–∞–∑—ã–π –ñ–∏—Ç–µ–ª—å", "–ü–µ–ø–µ–ª—å–Ω—ã–π –ü—ë—Å", "–ö–æ–ª–æ–∫–æ–ª–∏–π", "–°–ª–æ–º–∞–Ω–Ω—ã–π –ö—É–∫–ª–æ–≤–æ–¥", "–ñ–Ω–µ—Ü –ú–æ–ª—á–∞–Ω–∏—è"]
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {
        "description": "üè∞ –û–≥—Ä–æ–º–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å, –∑–∞–±—ã—Ç–∞—è –≤—Ä–µ–º–µ–Ω–µ–º...",
        "mobs": ["–ë–ª—É–∂–¥–∞—é—â–∏–π –†—ã—Ü–∞—Ä—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –î–µ–≤–∞", "–ì–∞—Ä–≥—É–ª—å—è-–ö–∞—Ä–∞—É–ª—å—â–∏—Ü–∞", "–ö–Ω–∏–∂–Ω—ã–π –£–∂–∞—Å", "–°—Ç–∞—Ä—ã–π –ö–ª—é—á–Ω–∏–∫"]
    }
}

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    response = supabase.table("users").select("username", "clan").eq("user_id", user_id).execute()
    row = response.data[0] if response.data else None

    if row and row.get("username") and row.get("clan"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    elif row and row.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

# ---------- –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è ----------
@dp.message(lambda msg: msg.text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è")
async def adventures(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=loc, callback_data=f"adventure_{loc}")]
        for loc in ADVENTURES
    ])
    await message.answer("üåç <b>–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π:</b>", reply_markup=keyboard)

@dp.callback_query()
async def handle_adventure(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if data.startswith("adventure_"):
        loc_name = data[len("adventure_"):]
        adventure = ADVENTURES.get(loc_name)

        if not adventure:
            await callback.message.answer("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        mobs_text = "\n".join(f"‚Ä¢ {mob}" for mob in adventure["mobs"])
        text = f"{adventure['description']}\n\nüëæ <b>–í—Ä–∞–≥–∏:</b>\n{mobs_text}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", callback_data=f"explore_{loc_name}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    elif data.startswith("explore_"):
        loc_name = data[len("explore_"):]

        LOCATIONS = {
            "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {"exp": (10, 30), "money": (20, 40), "duration": 60},
            "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {"exp": (20, 50), "money": (30, 60), "duration": 180},
            "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {"exp": (40, 60), "money": (50, 80), "duration": 300},
        }

        MOBS = ADVENTURES.get(loc_name, {}).get("mobs", [])
        if not MOBS or loc_name not in LOCATIONS:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞—Ü–∏–∏.")
            return

        config = LOCATIONS[loc_name]
        exp = random.randint(*config["exp"])
        money = random.randint(*config["money"])
        mob = random.choice(MOBS)

        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        res = supabase.table("users").select("exp", "exp_max", "level", "money").eq("user_id", user_id).execute()
        if not res.data:
            await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = res.data[0]
        new_exp = user["exp"] + exp
        level = user["level"]
        exp_max = user["exp_max"]

        if new_exp >= exp_max:
            level += 1
            new_exp = 0
            exp_max = level * 100

        new_money = user["money"] + money

        supabase.table("users").update({
            "exp": new_exp,
            "level": level,
            "exp_max": exp_max,
            "money": new_money
        }).eq("user_id", user_id).execute()

        await callback.message.edit_text(
            f"üß≠ <b>–¢—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª –ª–æ–∫–∞—Ü–∏—é:</b> {loc_name}\n"
            f"üëæ –í—Å—Ç—Ä–µ—Ç–∏–ª: <b>{mob}</b>\n\n"
            f"üåü –û–ø—ã—Ç: +{exp}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: +{money}\n"
            f"üìà –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config['duration'] // 60} –º–∏–Ω",
            reply_markup=main_menu_kb
        )
        await callback.answer("–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    elif data == "back_to_adventures":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=loc, callback_data=f"adventure_{loc}")]
            for loc in ADVENTURES
        ])
        await callback.message.edit_text("üåç <b>–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π:</b>", reply_markup=keyboard)
        await callback.answer()

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
