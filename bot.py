import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiosupabase import Supabase, create_client

# --- ENV ---
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("BOT_TOKEN, SUPABASE_URL –∞–±–æ SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ñ!")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: Supabase = create_client(url=SUPABASE_URL, key=SUPABASE_KEY)

waiting_for_nick = set()
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton("ü™® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí™ –ú–æ–π –∫–ª–∞–Ω"),
         KeyboardButton("üèÜ –¢–æ–ø"), KeyboardButton("üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

async def add_user(user_id, nickname):
    await supabase.table("users").upsert({
        "user_id": user_id,
        "username": nickname,
        "status": "–ò–≥—Ä–æ–∫",
        "level": 1,
        "exp": 0,
        "exp_max": 100,
        "health": 100,
        "defense": 10,
        "attack": 50,
        "money": 0,
        "diamonds": 0,
        "head": "–Ω–µ—Ç",
        "body": "–Ω–µ—Ç",
        "legs": "–Ω–µ—Ç",
        "feet": "–Ω–µ—Ç",
        "weapon": "–Ω–µ—Ç",
        "bag": "–Ω–µ—Ç",
        "premium_until": None
    }).execute()

async def get_user(user_id):
    res = await supabase.table("users").select("*").eq("user_id", user_id).execute()
    return res.data[0] if res.data else None

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = await get_user(message.from_user.id)
    if user and user.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=main_menu_kb)
    else:
        waiting_for_nick.add(message.from_user.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

@dp.message()
async def handle_msg(msg: types.Message):
    uid = msg.from_user.id
    if uid in waiting_for_nick:
        if len(msg.text.strip()) < 3:
            return await msg.answer("–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        await add_user(uid, msg.text.strip())
        waiting_for_nick.remove(uid)
        return await msg.answer(f"–ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{msg.text.strip()}</b>", reply_markup=main_menu_kb)

    if msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user = await get_user(uid)
        if not user:
            waiting_for_nick.add(uid)
            return await msg.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –µ–≥–æ.")
        text = (
            f"<b>{user['username']}</b> | <code>{uid}</code>\n"
            f"–£—Ä–æ–≤–µ–Ω—å {user['level']} | –û–ø—ã—Ç {user['exp']} / {user['exp_max']}\n"
            f"‚ù§Ô∏è{user['health']} üõ°{user['defense']} üó°{user['attack']}\n"
            f"–î–µ–Ω—å–≥–∏: {user['money']} | –ê–ª–º–∞–∑—ã: {user['diamonds']}\n"
            f"Premium –¥–æ: {user['premium_until'] or '–ù–µ—Ç'}"
        )
        return await msg.answer(text, reply_markup=main_menu_kb)

    if msg.text == "üèÜ –¢–æ–ø":
        res = await supabase.table("users").select("username").execute()
        players = res.data or []
        if not players:
            return await msg.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_menu_kb)
        lst = "\n".join(f"{i+1}. {p['username']}" for i, p in enumerate(players))
        return await msg.answer(f"üèÜ –ò–≥—Ä–æ–∫–∏:\n\n{lst}", reply_markup=main_menu_kb)

    await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∏–ª–∏ /start.", reply_markup=main_menu_kb)

async def notify_all():
    res = await supabase.table("users").select("user_id").execute()
    for u in (res.data or []):
        try:
            await bot.send_message(u["user_id"], "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        except:
            pass

async def main():
    await notify_all()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
