import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiosupabase import create_client, SupabaseClient

# ---------- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ú–Ü–ù–ù–ò–• ----------
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("BOT_TOKEN, SUPABASE_URL –∞–±–æ SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ñ!")

# ---------- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ----------
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: SupabaseClient = create_client(SUPABASE_URL, SUPABASE_KEY)

waiting_for_nick = set()

# ---------- –ö–õ–ê–í–Ü–ê–¢–£–†–ê ----------
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="ü™® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"),
         KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

# ---------- SUPABASE FUNCTIONS ----------
async def add_user(user_id, username):
    await supabase.table("users").upsert({
        "user_id": user_id,
        "username": username,
        "status": "–ò–≥—Ä–æ–∫",
        "level": 1,
        "exp": 0,
        "exp_max": 100,
        "health": 100,
        "defense": 10,
        "attack": 50,
        "money": 0,
        "diamonds": 0,
        "head": "–Ω–µ—Ç",
        "body": "–Ω–µ—Ç",
        "legs": "–Ω–µ—Ç",
        "feet": "–Ω–µ—Ç",
        "weapon": "–Ω–µ—Ç",
        "bag": "–Ω–µ—Ç",
        "premium_until": None
    }).execute()

async def get_user(user_id):
    res = await supabase.table("users").select("*").eq("user_id", user_id).execute()
    if res.data:
        return res.data[0]
    return None

async def update_user(user_id, data: dict):
    await supabase.table("users").update(data).eq("user_id", user_id).execute()

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if user and user.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

# ---------- –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ----------
@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in waiting_for_nick:
        nickname = text
        if len(nickname) < 3:
            await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        await add_user(user_id, nickname)
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{nickname}</b>! –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=main_menu_kb)
        return

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user = await get_user(user_id)
        if user:
            profile_text = (
                f"<b>{user['username']}</b> | <code>{user_id}</code>\n"
                f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {user['status']}\n\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {user['level']}\n–û–ø—ã—Ç: {user['exp']} / {user['exp_max']}\n"
                f"‚ù§Ô∏è{user['health']} | üõ°{user['defense']} | üó°{user['attack']}\n\n"
                f"ü™ô –î–µ–Ω—å–≥–∏: {user['money']} üí∞, –ê–ª–º–∞–∑—ã: {user['diamonds']} üíé\n"
                f"ü•ã –û–¥–µ–∂–¥–∞: –ì–æ–ª–æ–≤–∞: {user['head']}, –¢–µ–ª–æ: {user['body']}, –ù–æ–≥–∏: {user['legs']}, –°—Ç—É–ø–Ω–∏: {user['feet']}\n"
                f"ü™õ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: –û—Ä—É–∂–∏–µ: {user['weapon']}\nüß∞ –°—É–º–∫–∞: {user['bag']}\n\n"
                f"‚≠ê Premium –¥–æ: {user['premium_until'] or '–ù–µ—Ç'}"
            )
            await message.answer(profile_text, reply_markup=main_menu_kb)
        else:
            waiting_for_nick.add(user_id)
            await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

    elif text == "üèÜ –¢–æ–ø":
        res = await supabase.table("users").select("username").execute()
        players = res.data if res.data else []
        if players:
            players_list = "\n".join(f"{i+1}. {p['username']}" for i, p in enumerate(players))
            await message.answer(f"üèÜ <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n{players_list}", reply_markup=main_menu_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=main_menu_kb)

    elif text in ["üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "ü™® –ö—Ä–∞—Ñ—Ç", "üí™ –ú–æ–π –∫–ª–∞–Ω", "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è"]:
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{text}</b>", reply_markup=main_menu_kb)

    else:
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.", reply_markup=main_menu_kb)

# ---------- –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–°–Ü–ú –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú –ü–†–ò –°–¢–ê–†–¢–Ü ----------
async def notify_users_on_start():
    res = await supabase.table("users").select("user_id").execute()
    users = res.data if res.data else []
    for user in users:
        try:
            await bot.send_message(user["user_id"], "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î ‚úÖ")
        except Exception:
            pass

# ---------- –û–°–ù–û–í–ù–ò–ô –ó–ê–ü–£–°–ö ----------
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
