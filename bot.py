import os
import asyncio
import re
import random
from collections import defaultdict
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher, types, F
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv


# ---------- Load environment ----------


now = datetime.now(timezone.utc)
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN, SUPABASE_URL —Ç–∞ SUPABASE_ANON_KEY –≤ .env")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
waiting_for_price = set()
lot_creation_data = {}

waiting_for_nick = set()

# ---------- Keyboards ----------
cancel_search_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –£–π—Ç–∏ —Å –∞—Ä–µ–Ω—ã", callback_data="pvp_cancel")]
    ]
)
arena_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)

market_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç"), KeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –ª–æ—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (—Ç–æ—Ä–≥–æ–≤–ª—è)")]
    ],
    resize_keyboard=True
)

donate_shop_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üëë –ü—Ä–µ–º–∏—É–º"), KeyboardButton(text="üíé –ê–ª–º–∞–∑—ã")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (—Ç–æ—Ä–≥–æ–≤–ª—è)")]
    ],
    resize_keyboard=True
)
trade_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üíé –î–æ–Ω–∞—Ç –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üè™ –†—ã–Ω–æ–∫")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)


main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"), KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
        [KeyboardButton(text="‚öîÔ∏è –ê—Ä–µ–Ω–∞"), KeyboardButton(text="üõ°Ô∏è –ö–ª–∞–Ω–æ–≤–∞—è –±–∏—Ç–≤–∞")],
    ],
    resize_keyboard=True
)

top_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"), KeyboardButton(text="üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º")],
        [KeyboardButton(text="‚öîÔ∏è –¢–æ–ø –ø–æ PvP –ø–æ–±–µ–¥–∞–º")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

clan_battle_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìå –°–¥–µ–ª–∞—Ç—å –ø–∏–Ω"), KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏—Ç–≤—ã")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)


forge_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞"), KeyboardButton(text="üî® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
profile_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéí –†—é–∫–∑–∞–∫"), KeyboardButton(text="‚öôÔ∏è –ü—Ä–æ–∫–∞—á–∫–∞")],
        [KeyboardButton(text="‚öîÔ∏è –ù–∞–¥–µ—Ç—å"), KeyboardButton(text="‚ùå –°–Ω—è—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)

backpack_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="ü™ñ –ì–æ–ª–æ–≤–∞", callback_data="slot_head"), InlineKeyboardButton(text="üëï –¢–µ–ª–æ", callback_data="slot_body")],
    [InlineKeyboardButton(text="üß§ –†—É–∫–∏", callback_data="slot_gloves"), InlineKeyboardButton(text="üëñ –ù–æ–≥–∏", callback_data="slot_legs")],
    [InlineKeyboardButton(text="ü•æ –°—Ç—É–ø–Ω–∏", callback_data="slot_feet"), InlineKeyboardButton(text="üó° –û—Ä—É–∂–∏–µ", callback_data="slot_weapon")],
    [InlineKeyboardButton(text="üì¶ –†–µ—Å—É—Ä—Å—ã", callback_data="view_resources")]
])

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
equip_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü™ñ –ì–æ–ª–æ–≤–∞"), KeyboardButton(text="üëï –¢–µ–ª–æ"), KeyboardButton(text="üß§ –†—É–∫–∏")],
        [KeyboardButton(text="üëñ –ù–æ–≥–∏"), KeyboardButton(text="üëü –°—Ç—É–ø–Ω–∏"), KeyboardButton(text="üó°Ô∏è –û—Ä—É–∂–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
unequip_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùå –ì–æ–ª–æ–≤–∞"), KeyboardButton(text="‚ùå –¢–µ–ª–æ"), KeyboardButton(text="‚ùå –†—É–∫–∏")],
        [KeyboardButton(text="‚ùå –ù–æ–≥–∏"), KeyboardButton(text="‚ùå –°—Ç—É–ø–Ω–∏"), KeyboardButton(text="‚ùå –û—Ä—É–∂–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

async def notify_users_on_start():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –∞–±–æ —ñ–Ω—à—ñ –¥—ñ—ó


async def broadcast_battle_results():
    try:
        response = supabase.table("users").select("user_id", "username").execute()
        users = response.data or []

        if not users:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        allowed_locations = {
            "üè∞ –ü—Ä–æ–∫–ª—è—Ç–∞—è –¶–∏—Ç–∞–¥–µ–ª—å",
            "üåã –£—Ç—Ä–æ–±–∞ –í—É–ª–∫–∞–Ω–∞",
            "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –ó–∞–±–≤–µ–Ω–∏—è",
            "üëÅÔ∏è –û–±–∏—Ç–µ–ª—å –ò–ª–ª—é–∑–∏–π"
        }

        clancv_table = supabase.table("clancv").select("*").execute()
        clancv_rows = clancv_table.data or []

        result_lines = []
        for location in allowed_locations:
            controlling_clan = None
            for row in clancv_rows:
                if row.get(location):
                    controlling_clan = row["clan_name"]
                    break
            if controlling_clan:
                result_lines.append(f"{location} ‚Äî –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–ª–∞–Ω–∞ *{controlling_clan}*")
            else:
                result_lines.append(f"{location} ‚Äî –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤")

        result_text = "\n".join(result_lines)
        full_message = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞–Ω–æ–≤–æ–π –±–∏—Ç–≤—ã:*\n\n{result_text}"

        # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ user_id
        for user in users:
            user_id = user["user_id"]
            username = user.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            try:
                await bot.send_message(chat_id=user_id, text=full_message, parse_mode="Markdown")
                print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{username} ({user_id})")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å @{username} ({user_id}): {e}")

        print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")


async def show_clan_control_status():
    try:
        print("üì¢ –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ª–æ–∫–∞—Ü–∏—è–º–∏...")

        allowed_locations = {
            "üè∞ –ü—Ä–æ–∫–ª—è—Ç–∞—è –¶–∏—Ç–∞–¥–µ–ª—å",
            "üåã –£—Ç—Ä–æ–±–∞ –í—É–ª–∫–∞–Ω–∞",
            "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –ó–∞–±–≤–µ–Ω–∏—è",
            "üëÅÔ∏è –û–±–∏—Ç–µ–ª—å –ò–ª–ª—é–∑–∏–π"
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ clancv
        clancv_table = supabase.table("clancv").select("*").execute()
        clancv_rows = clancv_table.data or []

        for location in allowed_locations:
            controlling_clan = None

            for row in clancv_rows:
                if row.get(location) == True:
                    controlling_clan = row["clan_name"]
                    break  # –Ω–∞—à–ª–∏ –ø–µ—Ä–≤–æ–≥–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º

            if controlling_clan:
                print(f"üìç {location}: –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–ª–∞–Ω–∞ {controlling_clan}")
            else:
                print(f"üìç {location}: –ª–æ–∫–∞—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–∫–∞—Ü–∏–π: {e}")



async def run_clear_results():
    print("üßπ [19:00:01] –û–±–Ω—É–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    # –û—á–∏—Å—Ç–∫–∞ result_clan_battle
    result_table = supabase.table("result_clan_battle").select("*").execute()
    existing_rows = result_table.data or []
    if existing_rows:
        columns_to_reset = [key for key in existing_rows[0].keys() if key != "clan_name"]
        for row in existing_rows:
            clan_name = row["clan_name"]
            reset_data = {col: 0 for col in columns_to_reset}
            supabase.table("result_clan_battle").update(reset_data).eq("clan_name", clan_name).execute()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ result_clan_battle –æ–±–Ω—É–ª–µ–Ω–∞.")
    else:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ result_clan_battle –ø—É—Å—Ç–∞.")

async def run_calculate_results():
    print("üìä [19:01:01] –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    response = supabase.table("clan_battle").select("clan_name, pin, health, attack").execute()
    data = response.data or []
    results = {}
    for row in data:
        clan = row.get("clan_name")
        pin = row.get("pin")
        health = row.get("health", 0)
        attack = row.get("attack", 0)
        if clan and pin:
            value = health * attack
            results[(clan, pin)] = results.get((clan, pin), 0) + value
    for (clan, pin), value_to_add in results.items():
        supabase.table("result_clan_battle").update({pin: value_to_add}).eq("clan_name", clan).execute()
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã.")

async def run_clear_clan_battle():
    print("üóëÔ∏è [19:02:01] –û—á–∏—â–∞–µ–º clan_battle...")
    supabase.table("clan_battle").delete().neq("clan_name", "").execute()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ clan_battle –æ—á–∏—â–µ–Ω–∞.")

async def run_update_clancv():
    print("üìå [19:03:01] –û–±–Ω–æ–≤–ª—è–µ–º clancv...")
    allowed_locations = {
        "üè∞ –ü—Ä–æ–∫–ª—è—Ç–∞—è –¶–∏—Ç–∞–¥–µ–ª—å",
        "üåã –£—Ç—Ä–æ–±–∞ –í—É–ª–∫–∞–Ω–∞",
        "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –ó–∞–±–≤–µ–Ω–∏—è",
        "üëÅÔ∏è –û–±–∏—Ç–µ–ª—å –ò–ª–ª—é–∑–∏–π"
    }

    # –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π
    clancv_table = supabase.table("clancv").select("clan_name").execute()
    clancv_rows = clancv_table.data or []
    for row in clancv_rows:
        clan_name = row["clan_name"]
        reset_locations = {location: False for location in allowed_locations}
        supabase.table("clancv").update(reset_locations).eq("clan_name", clan_name).execute()
    print("üîÑ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    result_table = supabase.table("result_clan_battle").select("*").execute()
    updated_rows = result_table.data or []
    for location in allowed_locations:
        max_damage = 0
        top_clan = None
        for row in updated_rows:
            clan_name = row["clan_name"]
            damage = row.get(location, 0)
            if damage > max_damage:
                max_damage = damage
                top_clan = clan_name
        if top_clan:
            supabase.table("clancv").update({location: True}).eq("clan_name", top_clan).execute()
            print(f"üèÜ {location}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {top_clan} ({max_damage})")
        else:
            print(f"‚ö†Ô∏è {location}: –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")

    await show_clan_control_status()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def scheduler():
    while True:
        now = datetime.now(timezone.utc)  # timezone-aware –≤—Ä–µ–º—è
        run_times = {
            "clear_results": now.replace(hour=16, minute=55, second=1, microsecond=0),
            "calculate_results": now.replace(hour=16, minute=56, second=1, microsecond=0),
            "clear_clan_battle": now.replace(hour=16, minute=57, second=1, microsecond=0),
            "update_clancv": now.replace(hour=16, minute=58, second=1, microsecond=0),
        }

        for key in run_times:
            if now >= run_times[key]:
                run_times[key] += timedelta(days=1)

        for name, run_time in run_times.items():
            wait = (run_time - datetime.now(timezone.utc)).total_seconds()
            print(f"‚è≥ –ñ–¥—ë–º –¥–æ {name} ({run_time.time()} UTC) ‚Äî {wait} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait)

            if name == "clear_results":
                await run_clear_results()
            elif name == "calculate_results":
                await run_calculate_results()
            elif name == "clear_clan_battle":
                await run_clear_clan_battle()
            elif name == "update_clancv":
                await run_update_clancv()
                await broadcast_battle_results()

ITEMS_PER_PAGE = 10

async def create_paginated_inline_keyboard(user_id, items, supabase, page=0, category="–≤—Å–µ"):
    backpack_data = supabase.table("backpack").select("item_name, count").eq("user_id", user_id).execute()

    if not backpack_data.data:
        return None

    filtered_items = []
    for item in backpack_data.data:
        item_name = item['item_name']
        item_count = item['count']

        for category_name, category_data in items.items():
            for set_item in category_data:
                if set_item['name'] == item_name:
                    if category == "–≤—Å–µ" or category_name == category:
                        filtered_items.append((set_item, item_count))
                    break

    if not filtered_items:
        return None

    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    paginated_items = filtered_items[start:end]

    buttons = [
        InlineKeyboardButton(
            text=f"{item['name']} ({count})",
            callback_data=f"create_lot:{item['name']}"
        )
        for item, count in paginated_items
    ]

    # –†–æ–∑–∫–ª–∞–¥–∫–∞ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    keyboard_rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}")
        )
    if end < len(filtered_items):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page + 1}")
        )

    if pagination_buttons:
        keyboard_rows.append(pagination_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)



ITEMS_PER_PAGE = 10


async def show_market(message: types.Message, page: int = 1):
    offset = (page - 1) * ITEMS_PER_PAGE

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Å –ë–î
    result = supabase.table("rynok") \
        .select("*") \
        .order("id", desc=False) \
        .range(offset, offset + ITEMS_PER_PAGE - 1) \
        .execute()

    data = result.data
    if not data:
        await message.answer("‚ùó –†—ã–Ω–æ–∫ –ø—É—Å—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    market_text = f"üè™ <b>–õ–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ (—Å—Ç—Ä. {page})</b>:\n\n"
    for i, lot in enumerate(data, start=1 + offset):
        market_text += f"{i}. <b>{lot['item_name']}</b> ‚Äî {lot['cost']} –º–æ–Ω–µ—Ç\n"

    # === –ö–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ ===
    item_buttons = []
    row = []
    for i, lot in enumerate(data):
        button = InlineKeyboardButton(
            text=lot['item_name'],
            callback_data=f"buy_{lot['id']}"  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ id –ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        )
        row.append(button)
        if len(row) == 2:
            item_buttons.append(row)
            row = []
    if row:
        item_buttons.append(row)

    # === –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ===
    total_lots = supabase.table("rynok").select("id", count="exact").execute().count or 0
    max_page = (total_lots + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"market_page_{page - 1}"))
    if page < max_page:
        pagination_buttons.append(InlineKeyboardButton(text="‚è© –î–∞–ª–µ–µ", callback_data=f"market_page_{page + 1}"))

    if pagination_buttons:
        item_buttons.append(pagination_buttons)

    keyboard = InlineKeyboardMarkup(inline_keyboard=item_buttons)

    await message.answer(market_text, parse_mode="HTML", reply_markup=keyboard)


@dp.message(lambda message: message.from_user.id in waiting_for_price)
async def handle_price_input(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏
    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ë–µ–∑ –±—É–∫–≤, —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return

    price = int(text)
    item_name = lot_creation_data.get(user_id)

    # ‚¨áÔ∏è –ó–º–µ–Ω—à–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ backpack –Ω–∞ 1
    result = supabase.table("backpack") \
        .select("count") \
        .eq("user_id", user_id) \
        .eq("item_name", item_name) \
        .limit(1) \
        .execute()

    if not result.data:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫–µ.")
        waiting_for_price.remove(user_id)
        lot_creation_data.pop(user_id, None)
        return

    current_count = result.data[0]['count']
    if current_count <= 0:
        await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return

    # –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è 0 ‚Äî –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä—è–¥–æ–∫ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –∑ 0
    if current_count == 1:
        supabase.table("backpack") \
            .delete() \
            .eq("user_id", user_id) \
            .eq("item_name", item_name) \
            .execute()
    else:
        supabase.table("backpack") \
            .update({"count": current_count - 1}) \
            .eq("user_id", user_id) \
            .eq("item_name", item_name) \
            .execute()

    # üõí –î–æ–¥–∞—Ç–∏ –ª–æ—Ç —É —Ç–∞–±–ª–∏—Ü—é rynok
    supabase.table("rynok").insert({
        "user_id": user_id,
        "item_name": item_name,
        "cost": price
    }).execute()

    # ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await message.answer(
        f"‚úÖ –õ–æ—Ç –Ω–∞ <b>{item_name}</b> —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–Ω–æ–π <b>{price}</b> –º–æ–Ω–µ—Ç!\n"
        f"üìâ –ò–∑ —Ä—é–∫–∑–∞–∫–∞ —Å–ø–∏—Å–∞–Ω–æ 1 –ø—Ä–µ–¥–º–µ—Ç.",
        parse_mode="HTML"
    )

    # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω
    waiting_for_price.remove(user_id)
    lot_creation_data.pop(user_id, None)

@dp.message(lambda message: message.text == "üè™ –†—ã–Ω–æ–∫")
async def handle_market_button(message: types.Message):
    await message.answer("üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=market_menu_kb)
    await show_market(message, page=1)


@dp.message(lambda message: message.text == "üõí –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç")
async def handle_create_lot_start(message: types.Message):
    user_id = message.from_user.id
    keyboard = await create_paginated_inline_keyboard(user_id, items, supabase, page=0)

    if keyboard:
        await message.answer("üéí –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ.")


@dp.message(lambda message: message.text == "‚ùå –£–±—Ä–∞—Ç—å –ª–æ—Ç")
async def handle_remove_lot_menu(message: types.Message):
    await show_user_lots(message, page=1)

ITEMS_PER_PAGE = 10  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å

async def show_user_lots(message_or_callback, page: int = 1):
    user_id = message_or_callback.from_user.id if hasattr(message_or_callback, "from_user") else message_or_callback.from_user.id
    offset = (page - 1) * ITEMS_PER_PAGE

    result = supabase.table("rynok") \
        .select("*") \
        .eq("user_id", user_id) \
        .order("id", desc=False) \
        .range(offset, offset + ITEMS_PER_PAGE - 1) \
        .execute()

    data = result.data
    if not data:
        await message_or_callback.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
        return

    text = f"‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä. {page})</b>:\n\n"
    for i, lot in enumerate(data, start=1 + offset):
        text += f"{i}. <b>{lot['item_name']}</b> ‚Äî {lot['cost']} –º–æ–Ω–µ—Ç\n"

    # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = []
    row = []
    for lot in data:
        row.append(InlineKeyboardButton(
            text=lot["item_name"],
            callback_data=f"remove_lot_{lot['id']}"
        ))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total = supabase.table("rynok").select("id", count="exact").eq("user_id", user_id).execute().count or 0
    max_page = (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    pagination_row = []
    if page > 1:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_lots_page_{page - 1}"))
    if page < max_page:
        pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"user_lots_page_{page + 1}"))
    if pagination_row:
        keyboard.append(pagination_row)

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    else:
        await message_or_callback.answer(text, parse_mode="HTML", reply_markup=markup)


# ----------EXP ---------

async def add_experience(user_id: int, amount: int):
    response = supabase.table("users").select("exp, level, level_points").eq("user_id", user_id).execute()
    if not response.data:
        return

    user = response.data[0]
    current_exp = user.get("exp", 0)
    level = user.get("level", 1)
    level_points = user.get("level_points", 0)

    new_exp = current_exp + amount
    exp_max = level * 100
    level_ups = 0

    while new_exp >= exp_max:
        new_exp -= exp_max
        level += 1
        level_ups += 1
        exp_max = level * 100

    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –±–æ–ª—å—à–µ 75, –æ—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–µ –¥–∞—ë–º
    if level > 75:
        level_points_to_add = 0
    else:
        level_points_to_add = level_ups

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –æ–ø—ã—Ç–∞ –∏ –æ—á–∫–æ–≤ –ø—Ä–æ–∫–∞—á–∫–∏
    supabase.table("users").update({
        "exp": new_exp,
        "level": level,
        "exp_max": exp_max,
        "level_points": level_points + level_points_to_add
    }).eq("user_id", user_id).execute()

    if level_ups > 0:
        await bot.send_message(
            user_id,
            f"üåü <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ <b>{level} —É—Ä–æ–≤–Ω—è</b>!\n"
            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{level_points_to_add}</b> –æ—á–∫–æ–≤ –ø—Ä–æ–∫–∞—á–∫–∏!"
        )



async def create_inline_keyboard_from_backpack(user_id, category):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    backpack_data = supabase.table("backpack").select("item_name, count").eq("user_id", user_id).execute()

    if not backpack_data.data:
        return None  # –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ

    filtered_items = []

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ full_items
    for item in backpack_data.data:
        item_name = item['item_name']
        item_count = item['count']
        matched = False

        for category_name, item_list in full_items.items():
            if category_name != category:
                continue

            for equip_item in item_list:
                if equip_item['name'] == item_name:
                    filtered_items.append((equip_item, item_count))
                    matched = True
                    break
            if matched:
                break

    if not filtered_items:
        return None  # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    buttons = [
        InlineKeyboardButton(
            text=f"{item['name']} ({count})",
            callback_data=item['callback_data']
        )
        for item, count in filtered_items
    ]

    # –ö–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–∞ –≤ —Ä—è–¥
    keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


def get_item_stats(item_name):
    for tier in SETS.values():
        for set_data in tier.values():
            for item in set_data["items"]:
                if item["name"] == item_name:
                    return item["hp"], item["damage"]
    return 0, 0


def build_pvp_message(player, opponent):
    return (
        f"üë§ –í—ã: {player['username']}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player['health']}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {player['attack']}\n"
        f"üõ°Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {player['dodge']}\n"
        f"üí• –ö—Ä–∏—Ç: {player['crit']}\n"
        f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {player['counter_attack']}\n\n"

        f"üéØ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent['username']}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {opponent['health']}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {opponent['attack']}\n"
        f"üõ°Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {opponent['dodge']}\n"
        f"üí• –ö—Ä–∏—Ç: {opponent['crit']}\n"
        f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {opponent['counter_attack']}"
    )



# ---------- Clans ----------
CLANS = {
    "–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏ üåå": "üõ° <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–µ–µ –∏ –Ω–µ—É–ª–æ–≤–∏–º–æ–µ –±—Ä–∞—Ç—Å—Ç–≤–æ, —á—å—è —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º –∏ —Ç–∞–π–Ω–∞–º–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≥–ª—É–±–æ–∫–∞ –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–∞. –û–Ω–∏ ‚Äî –≤–µ—á–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏, —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –Ω–µ–±–µ—Å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –º–∏—Ä–æ–≤ –æ—Ç —É–≥—Ä–æ–∑, –∏—Å—Ö–æ–¥—è—â–∏—Ö –∏–∑ –±–µ–∑–¥–Ω—ã –∫–æ—Å–º–æ—Å–∞. –ò—Ö –≤–∑–≥–ª—è–¥ —É—Å—Ç—Ä–µ–º–ª–µ–Ω –∫ –∑–≤–µ–∑–¥–∞–º, –∞ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —Ä–∏—Ç–º–µ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤.",
    "–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏ üî•": "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–∏–π –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –æ—Ä–¥–µ–Ω, —á—å—è –º–∏—Å—Å–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ—Å—Ç–∏ —Å–≤–µ—Ç, –Ω–∞–¥–µ–∂–¥—É –∏ –∏—Å—Ç–∏–Ω—É —á–µ—Ä–µ–∑ —Å–∞–º—ã–µ —Ç–µ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞. –û–Ω–∏ ‚Äî –ø—É—Ç–µ–≤–æ–¥–Ω–∞—è –∑–≤–µ–∑–¥–∞ –¥–ª—è –∑–∞–±–ª—É–¥—à–∏—Ö, —Å–∏–º–≤–æ–ª –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π –≤–µ—Ä—ã –∏ –æ–ø–ª–æ—Ç –ø—Ä–æ—Ç–∏–≤ —Ç—å–º—ã –∏ —Ö–∞–æ—Å–∞. –ò—Ö —Å–∏–ª–∞ –∏—Å—Ö–æ–¥–∏—Ç –∏–∑ —á–∏—Å—Ç–æ—Ç—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π, –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ–º, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç.",
    "–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏ üåë": "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–µ–µ –±—Ä–∞—Ç—Å—Ç–≤–æ, —á—å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—É—Ç–∞–Ω–æ —Ç–∞–π–Ω–æ–π –∏ –ª–µ–≥–µ–Ω–¥–∞–º–∏. –û–Ω–∏ –Ω–µ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ —Å–ª–∞–≤–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –ø—Ä–∏–∑–Ω–∞–Ω–∏—é, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–Ω–µ–π, —Å–ª–æ–≤–Ω–æ –Ω–µ–≤–∏–¥–∏–º—ã–µ –≤–∏—Ö—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ª–∏—à—å —Å–ª–µ–¥ —Å—É–¥—å–±—ã.",
    "–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏ üéµ": "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî —ç—Ç–æ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —á—å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—É—Ç–∞–Ω–æ –∑–∞–≤–µ—Å–æ–π –ø–µ—á–∞–ª–∏ –∏ –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω. –û–Ω–∏ –Ω–µ –≤–ª–∞–¥–µ—é—Ç –æ—Å—Ç—Ä—ã–º–∏ –∫–ª–∏–Ω–∫–∞–º–∏ –∏–ª–∏ –≥—Ä–æ–º–æ–≥–ª–∞—Å–Ω—ã–º–∏ –∫—Ä–∏–∫–∞–º–∏, –∏—Ö –æ—Ä—É–∂–∏–µ ‚Äî —ç—Ç–æ —ç–º–æ—Ü–∏–∏, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç—Ö–æ –∑–∞–±—ã—Ç—ã—Ö –º–µ–ª–æ–¥–∏–π. –ß–ª–µ–Ω—ã —ç—Ç–æ–≥–æ –∫–ª–∞–Ω–∞ ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ —Å–∫–æ—Ä–±–∏, –Ω–æ—Å–∏—Ç–µ–ª–∏ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç—ã —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —á—É–≤—Å—Ç–≤."
}
items = {
    "head": [
        {"name": "–®–ª–µ–º –°—Ç—Ä–∞–∂–∞", "callback_data": "equip_helmet_guard"},
        {"name": "–°–µ—Ä—å–≥–∏ –•–∏—â–Ω–∏–∫–∞", "callback_data": "equip_ear_predator"},
        {"name": "–®–ª–µ–º –°—É–¥—å–±—ã", "callback_data": "equip_helmet_fate"},
        {"name": "–®–ª–µ–º –ë—ã–ª–æ–≥–æ", "callback_data": "equip_helmet_of_old"},
        {"name": "–ö–∞–ø—é—à–æ–Ω –°–≤–µ—Ç–∞", "callback_data": "equip_hood_of_light"},
        {"name": "–®–ª—è–ø–∞ –û—Ö–æ—Ç–Ω–∏–∫–∞", "callback_data": "equip_hunter_hat"}
    ],
    "body": [
        {"name": "–ü–ª–∞—â –ñ–∏–∑–Ω–∏", "callback_data": "equip_cloak_of_life"},
        {"name": "–ê–º—É–ª–µ—Ç –•–∏—â–Ω–∏–∫–∞", "callback_data": "equip_amulet_of_predator"},
        {"name": "–ê–º—É–ª–µ—Ç –ü—Ä–∞–≤–æ—Å—É–¥–∏—è", "callback_data": "equip_amulet_of_justice"},
        {"name": "–î–æ—Å–ø–µ—Ö –ß–µ—Å—Ç–∏", "callback_data": "equip_armor_of_honor"},
        {"name": "–ö—É—Ä—Ç–∫–∞ –°–≤–µ—Ç–∞", "callback_data": "equip_jacket_of_light"},
        {"name": "–ü–ª–∞—â –¢–µ–Ω–µ–π", "callback_data": "equip_cloak_of_shadows"}
    ],
    "gloves": [
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ó–∞—â–∏—Ç—ã", "callback_data": "equip_gloves_of_protection"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ì–Ω–µ–≤–∞", "callback_data": "equip_gloves_of_wrath"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö–∞—Ä–∞—é—â–µ–≥–æ", "callback_data": "equip_gloves_of_avenger"},
        {"name": "–ù–∞—Ä—É—á–∏ –ë—ã–ª–æ–≥–æ", "callback_data": "equip_bracers_of_old"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö—Ä–∞—Å–æ–∫", "callback_data": "equip_gloves_of_paint"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –û—Ö–æ—Ç–Ω–∏–∫–∞", "callback_data": "equip_hunter_gloves"}
    ],
    "legs": [
        {"name": "–ü–æ—è—Å –°–∫–∞–ª—ã", "callback_data": "equip_belt_of_rock"},
        {"name": "–ü–æ—è—Å –•–∏—â–Ω–∏–∫–∞", "callback_data": "equip_belt_of_predator"},
        {"name": "–ü–æ—è—Å –û—Ç–≤–µ—Ç–∞", "callback_data": "equip_belt_of_revenge"},
        {"name": "–ü–æ—è—Å –ù–µ—Ä—É—à–∏–º–æ—Å—Ç–∏", "callback_data": "equip_belt_of_indestructibility"},
        {"name": "–Æ–±–∫–∞ –°–≤–µ—Ç–∞", "callback_data": "equip_skirt_of_light"},
        {"name": "–®—Ç–∞–Ω—ã –û—Ö–æ—Ç–Ω–∏–∫–∞", "callback_data": "equip_hunter_pants"}
    ],
    "feet": [
        {"name": "–ù–∞—Ä—É—á–∏ –¢–∏—Ç–∞–Ω–∞", "callback_data": "equip_bracers_of_titan"},
        {"name": "–°–∞–ø–æ–≥–∏ –ë—É—Ä–∏", "callback_data": "equip_boots_of_storm"},
        {"name": "–°–∞–ø–æ–≥–∏ –Ø—Ä–æ—Å—Ç–∏", "callback_data": "equip_boots_of_rage"},
        {"name": "–ü–æ–Ω–æ–∂–∏ –ë—ã–ª–æ–≥–æ", "callback_data": "equip_greaves_of_old"},
        {"name": "–°–∞–ø–æ–≥–∏ –°–≤–µ—Ç–∞", "callback_data": "equip_boots_of_light"},
        {"name": "–ö–æ–∂–∞–Ω—ã–µ –°–∞–ø–æ–≥–∏", "callback_data": "equip_leather_boots"}
    ],
    "weapon": [
        {"name": "–©–∏—Ç –í–µ—á–Ω–æ–π –°—Ç–∞–ª–∏", "callback_data": "equip_shield_of_eternal_steel"},
        {"name": "–ú–µ—á –ë—É—Ä–∏", "callback_data": "equip_sword_of_storm"},
        {"name": "–ö–ª–∏–Ω–æ–∫ –í–æ–∑–º–µ–∑–¥–∏—è", "callback_data": "equip_blade_of_vengeance"},
        {"name": "–†–∂–∞–≤–∞—è –°–µ–∫–∏—Ä–∞", "callback_data": "equip_rusty_axe"},
        {"name": "–ö–ª–∏–Ω–æ–∫ –°–≤–µ—Ç–∞", "callback_data": "equip_blade_of_light"},
        {"name": "–¢—Ä–æ—Å—Ç—å-—Ö–ª—ã—Å—Ç", "callback_data": "equip_whip_staff"}
    ]
}

locations = {
    "üè∞ –ü—Ä–æ–∫–ª—è—Ç–∞—è –¶–∏—Ç–∞–¥–µ–ª—å": "–í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä—É–∏–Ω—ã –¥—Ä–µ–≤–Ω–µ–≥–æ –∑–∞–º–∫–∞, —É—Ç–æ–ø–∞—é—â–µ–≥–æ –≤ —Ç—É–º–∞–Ω–µ –∏ –∑–∞–≥–∞–¥–∫–∞—Ö –ø—Ä–æ—à–ª–æ–≥–æ.",
    "üåã –£—Ç—Ä–æ–±–∞ –í—É–ª–∫–∞–Ω–∞": "–û–≥–Ω–µ–Ω–Ω–∞—è –ø–µ—â–µ—Ä–∞ —Å –º–µ—Ä—Ü–∞—é—â–∏–º–∏ –ª–∞–≤–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –≥–æ—Ä—è—á–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–æ–π –ø—Ä–∏—Ä–æ–¥—ã.",
    "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –ó–∞–±–≤–µ–Ω–∏—è": "–¢—É–º–∞–Ω–Ω—ã–π –∫–∞–Ω—å–æ–Ω, —É–∫—Ä–∞—à–µ–Ω–Ω—ã–π –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–º–∏ —Å–≤–µ—Ä–∫–∞—é—â–∏–º–∏ –ø–∞—É—Ç–∏–Ω–∞–º–∏, –ø–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–º–∏—Å—è –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–º —Å–≤–µ—Ç–µ.",
    "üëÅÔ∏è –û–±–∏—Ç–µ–ª—å –ò–ª–ª—é–∑–∏–π": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–µ–±–æ –∏–≥—Ä–∞–µ—Ç –≤—Å–µ–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏, –∞ –º–∏—Ä —Å–ª–æ–≤–Ω–æ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è –≤ –≤–æ–ª—à–µ–±—Å—Ç–≤–µ."
}

allowed_locations = {
    "üè∞ –ü—Ä–æ–∫–ª—è—Ç–∞—è –¶–∏—Ç–∞–¥–µ–ª—å",
    "üåã –£—Ç—Ä–æ–±–∞ –í—É–ª–∫–∞–Ω–∞",
    "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –ó–∞–±–≤–µ–Ω–∏—è",
    "üëÅÔ∏è –û–±–∏—Ç–µ–ª—å –ò–ª–ª—é–∑–∏–π"
}

full_items = {
    "head": [
        {"name": "–®–ª–µ–º –°—Ç—Ä–∞–∂–∞", "callback_data": "equip_helmet_guard"},
        {"name": "–°–µ—Ä—å–≥–∏ –•–∏—â–Ω–∏–∫–∞", "callback_data": "equip_ear_predator"},
        {"name": "–®–ª–µ–º –°—É–¥—å–±—ã", "callback_data": "equip_helmet_fate"},
        {"name": "–®–ª–µ–º –ë—ã–ª–æ–≥–æ", "callback_data": "equip_helmet_of_old"},
        {"name": "–ö–∞–ø—é—à–æ–Ω –°–≤–µ—Ç–∞", "callback_data": "equip_hood_of_light"},
        {"name": "–®–ª—è–ø–∞ –û—Ö–æ—Ç–Ω–∏–∫–∞", "callback_data": "equip_hunter_hat"},
        {"name": "–ö–∞–ø—é—à–æ–Ω –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", "callback_data": "equip_hood_of_strategy"}
    ],
    "body": [
        {"name": "–ü–ª–∞—â –ñ–∏–∑–Ω–∏", "callback_data": "equip_cloak_of_life"},
        {"name": "–ê–º—É–ª–µ—Ç –•–∏—â–Ω–∏–∫–∞", "callback_data": "equip_amulet_of_predator"},
        {"name": "–ê–º—É–ª–µ—Ç –ü—Ä–∞–≤–æ—Å—É–¥–∏—è", "callback_data": "equip_amulet_of_justice"},
        {"name": "–î–æ—Å–ø–µ—Ö –ß–µ—Å—Ç–∏", "callback_data": "equip_armor_of_honor"},
        {"name": "–ö—É—Ä—Ç–∫–∞ –°–≤–µ—Ç–∞", "callback_data": "equip_jacket_of_light"},
        {"name": "–ü–ª–∞—â –¢–µ–Ω–µ–π", "callback_data": "equip_cloak_of_shadows"},
        {"name": "–ö—É—Ä—Ç–∫–∞ –ò—Å–∫–∞—Ç–µ–ª—è", "callback_data": "equip_jacket_of_seeker"}
    ],
    "gloves": [
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ó–∞—â–∏—Ç—ã", "callback_data": "equip_gloves_of_protection"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ì–Ω–µ–≤–∞", "callback_data": "equip_gloves_of_wrath"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö–∞—Ä–∞—é—â–µ–≥–æ", "callback_data": "equip_gloves_of_avenger"},
        {"name": "–ù–∞—Ä—É—á–∏ –ë—ã–ª–æ–≥–æ", "callback_data": "equip_bracers_of_old"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö—Ä–∞—Å–æ–∫", "callback_data": "equip_gloves_of_paint"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –û—Ö–æ—Ç–Ω–∏–∫–∞", "callback_data": "equip_hunter_gloves"},
        {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ú–∞—Å—Ç–µ—Ä–∞", "callback_data": "equip_gloves_of_master"}
    ],
    "legs": [
        {"name": "–ü–æ—è—Å –°–∫–∞–ª—ã", "callback_data": "equip_belt_of_rock"},
        {"name": "–ü–æ—è—Å –•–∏—â–Ω–∏–∫–∞", "callback_data": "equip_belt_of_predator"},
        {"name": "–ü–æ—è—Å –û—Ç–≤–µ—Ç–∞", "callback_data": "equip_belt_of_revenge"},
        {"name": "–ü–æ—è—Å –ù–µ—Ä—É—à–∏–º–æ—Å—Ç–∏", "callback_data": "equip_belt_of_indestructibility"},
        {"name": "–Æ–±–∫–∞ –°–≤–µ—Ç–∞", "callback_data": "equip_skirt_of_light"},
        {"name": "–®—Ç–∞–Ω—ã –û—Ö–æ—Ç–Ω–∏–∫–∞", "callback_data": "equip_hunter_pants"},
        {"name": "–†–µ–º–µ–Ω—å –¢–∞–∫—Ç–∏–∫–∞", "callback_data": "equip_belt_of_tactician"}
    ],
    "feet": [
        {"name": "–ù–∞—Ä—É—á–∏ –¢–∏—Ç–∞–Ω–∞", "callback_data": "equip_bracers_of_titan"},
        {"name": "–°–∞–ø–æ–≥–∏ –ë—É—Ä–∏", "callback_data": "equip_boots_of_storm"},
        {"name": "–°–∞–ø–æ–≥–∏ –Ø—Ä–æ—Å—Ç–∏", "callback_data": "equip_boots_of_rage"},
        {"name": "–ü–æ–Ω–æ–∂–∏ –ë—ã–ª–æ–≥–æ", "callback_data": "equip_greaves_of_old"},
        {"name": "–°–∞–ø–æ–≥–∏ –°–≤–µ—Ç–∞", "callback_data": "equip_boots_of_light"},
        {"name": "–ö–æ–∂–∞–Ω—ã–µ –°–∞–ø–æ–≥–∏", "callback_data": "equip_leather_boots"},
        {"name": "–°–∞–ø–æ–≥–∏ –°–∫–∏—Ç–∞–ª—å—Ü–∞", "callback_data": "equip_boots_of_wanderer"}
    ],
    "weapon": [
        {"name": "–©–∏—Ç –í–µ—á–Ω–æ–π –°—Ç–∞–ª–∏", "callback_data": "equip_shield_of_eternal_steel"},
        {"name": "–ú–µ—á –ë—É—Ä–∏", "callback_data": "equip_sword_of_storm"},
        {"name": "–ö–ª–∏–Ω–æ–∫ –í–æ–∑–º–µ–∑–¥–∏—è", "callback_data": "equip_blade_of_vengeance"},
        {"name": "–†–∂–∞–≤–∞—è –°–µ–∫–∏—Ä–∞", "callback_data": "equip_rusty_axe"},
        {"name": "–ö–ª–∏–Ω–æ–∫ –°–≤–µ—Ç–∞", "callback_data": "equip_blade_of_light"},
        {"name": "–¢—Ä–æ—Å—Ç—å-—Ö–ª—ã—Å—Ç", "callback_data": "equip_whip_staff"},
        {"name": "–ö–æ–ø—å—ë –£–Ω–∏—á—Ç–æ–∂–∏—Ç–µ–ª—å –ó–ª–∞", "callback_data": "equip_spear_of_purifier"}
    ]
}
SETS = {
    "strong": {
        "–ë–∞—Å—Ç–∏–æ–Ω –¢–∏—Ç–∞–Ω–∞": {
            "description": "üõ°Ô∏è –ú–∞—Å—Å–∏–≤–Ω—ã–π —Å–µ—Ç, –¥–∞—é—â–∏–π –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ —â–∏—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã",
            "items": [
                {"id": 1, "name": "–®–ª–µ–º –°—Ç—Ä–∞–∂–∞", "hp": 120, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 2, "name": "–ü–ª–∞—â –ñ–∏–∑–Ω–∏", "hp": 200, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 3, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ó–∞—â–∏—Ç—ã", "hp": 60, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 4, "name": "–ü–æ—è—Å –°–∫–∞–ª—ã", "hp": 120, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 5, "name": "–ù–∞—Ä—É—á–∏ –¢–∏—Ç–∞–Ω–∞", "hp": 50, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 6, "name": "–©–∏—Ç –í–µ—á–Ω–æ–π –°—Ç–∞–ª–∏", "hp": 150, "damage": 80, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–ö–ª–∏–Ω–æ–∫ –ë—É—Ä–∏": {
            "description": "‚öîÔ∏è –õ–µ–≥–∫–∏–π –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —É—Ä–æ–Ω",
            "items": [
                {"id": 7, "name": "–°–µ—Ä—å–≥–∏ –•–∏—â–Ω–∏–∫–∞", "hp": 30, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 8, "name": "–ê–º—É–ª–µ—Ç –•–∏—â–Ω–∏–∫–∞", "hp": 40, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 9, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ì–Ω–µ–≤–∞", "hp": 20, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 10, "name": "–ü–æ—è—Å –•–∏—â–Ω–∏–∫–∞", "hp": 30, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 11, "name": "–°–∞–ø–æ–≥–∏ –ë—É—Ä–∏", "hp": 30, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 12, "name": "–ú–µ—á –ë—É—Ä–∏", "hp": 0, "damage": 180, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–í–æ–∑–º–µ–∑–¥–∏–µ": {
            "description": "üó°Ô∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ç —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É—Ä–æ–Ω",
            "items": [
                {"id": 13, "name": "–®–ª–µ–º –°—É–¥—å–±—ã", "hp": 60, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 14, "name": "–ê–º—É–ª–µ—Ç –ü—Ä–∞–≤–æ—Å—É–¥–∏—è", "hp": 100, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 15, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö–∞—Ä–∞—é—â–µ–≥–æ", "hp": 40, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 16, "name": "–ü–æ—è—Å –û—Ç–≤–µ—Ç–∞", "hp": 60, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 17, "name": "–°–∞–ø–æ–≥–∏ –Ø—Ä–æ—Å—Ç–∏", "hp": 40, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 18, "name": "–ö–ª–∏–Ω–æ–∫ –í–æ–∑–º–µ–∑–¥–∏—è", "hp": 0, "damage": 120, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        }
    },
    "weak": {
        "–ó–∞–±—ã—Ç—ã–π –°—Ç—Ä–∞–∂": {
            "description": "üõ°Ô∏è –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ç —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —Å–ª–∞–±—ã–º —É—Ä–æ–Ω–æ–º",
            "items": [
                {"id": 19, "name": "–®–ª–µ–º –ë—ã–ª–æ–≥–æ", "hp": 50, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 20, "name": "–î–æ—Å–ø–µ—Ö –ß–µ—Å—Ç–∏", "hp": 100, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 21, "name": "–ù–∞—Ä—É—á–∏ –ë—ã–ª–æ–≥–æ", "hp": 40, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 22, "name": "–ü–æ—è—Å –ù–µ—Ä—É—à–∏–º–æ—Å—Ç–∏", "hp": 60, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 23, "name": "–ü–æ–Ω–æ–∂–∏ –ë—ã–ª–æ–≥–æ", "hp": 50, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 24, "name": "–†–∂–∞–≤–∞—è –°–µ–∫–∏—Ä–∞", "hp": 0, "damage": 50, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–ó–≤—ë–∑–¥–Ω—ã–π –ñ–∏–≤–æ–ø–∏—Å–µ—Ü": {
            "description": "‚ú® –õ–µ–≥–∫–∏–π —Å–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º, –Ω–æ —Å–∏–ª—å–Ω—ã–º –æ—Ä—É–∂–∏–µ–º",
            "items": [
                {"id": 25, "name": "–ö–∞–ø—é—à–æ–Ω –°–≤–µ—Ç–∞", "hp": 15, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 26, "name": "–ö—É—Ä—Ç–∫–∞ –°–≤–µ—Ç–∞", "hp": 25, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 27, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö—Ä–∞—Å–æ–∫", "hp": 15, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 28, "name": "–Æ–±–∫–∞ –°–≤–µ—Ç–∞", "hp": 20, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 29, "name": "–°–∞–ø–æ–≥–∏ –°–≤–µ—Ç–∞", "hp": 25, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 30, "name": "–ö–ª–∏–Ω–æ–∫ –°–≤–µ—Ç–∞", "hp": 0, "damage": 140, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–û—Ö–æ—Ç–Ω–∏–∫": {
            "description": "üèπ –°–µ—Ç –¥–ª—è –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—â–∏—Ç—ã, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –æ—Ä—É–∂–∏–µ",
            "items": [
                {"id": 31, "name": "–®–ª—è–ø–∞ –û—Ö–æ—Ç–Ω–∏–∫–∞", "hp": 25, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 32, "name": "–ü–ª–∞—â –¢–µ–Ω–µ–π", "hp": 50, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 33, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –û—Ö–æ—Ç–Ω–∏–∫–∞", "hp": 25, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 34, "name": "–®—Ç–∞–Ω—ã –û—Ö–æ—Ç–Ω–∏–∫–∞", "hp": 30, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 35, "name": "–ö–æ–∂–∞–Ω—ã–µ –°–∞–ø–æ–≥–∏", "hp": 30, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 36, "name": "–¢—Ä–æ—Å—Ç—å-—Ö–ª—ã—Å—Ç", "hp": 0, "damage": 90, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        }
    },
    "crafter": {
        "–û—Å–µ–Ω–Ω–∏–π –õ–∏—Å—Ç üçÅ": {
            "description": "üçÅ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞. –û—Å–µ–Ω–Ω–∏–π –õ–∏—Å—Ç —Å–æ—á–µ—Ç–∞–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –∑–∞—â–∏—Ç—É —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∞–º–æ–¥–µ–ª—å–Ω–æ–µ, –Ω–æ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ.",
            "items": [
                {"id": 37, "name": "–ö–∞–ø—é—à–æ–Ω –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", "hp": 60, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"id": 38, "name": "–ö—É—Ä—Ç–∫–∞ –ò—Å–∫–∞—Ç–µ–ª—è", "hp": 100, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"id": 39, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ú–∞—Å—Ç–µ—Ä–∞", "hp": 40, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"id": 40, "name": "–†–µ–º–µ–Ω—å –¢–∞–∫—Ç–∏–∫–∞", "hp": 60, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"id": 41, "name": "–°–∞–ø–æ–≥–∏ –°–∫–∏—Ç–∞–ª—å—Ü–∞", "hp": 50, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"id": 42, "name": "–ö–æ–ø—å—ë –£–Ω–∏—á—Ç–æ–∂–∏—Ç–µ–ª—å –ó–ª–∞", "hp": 80, "damage": 130, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        }
    }
}

DROP = {
    "epic": {
        "–¢–µ–Ω–µ–≤–æ–π –û–±—Å–∏–¥–∏–∞–Ω": {
            "description": "üñ§ –¢—ë–º–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–∏–Ω–µ—Ä–∞–ª, –ø–æ–≥–ª–æ—â–∞—é—â–∏–π —Å–≤–µ—Ç. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —É—Å–∏–ª–µ–Ω–∏–∏ –æ—Ä—É–∂–∏—è –∏ —ç–ª–∏—Ç–Ω—ã—Ö –¥–æ—Å–ø–µ—Ö–æ–≤.",
            "chance": 5
        }
    },
    "rare": {
        "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": {
            "description": "üßµ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–∂–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É—Å–∏–ª–µ–Ω–∏—è. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏.",
            "chance": 5
        }
    },
    "common": {
        "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": {
            "description": "üçÉ –õ—ë–≥–∫–∏–π, –Ω–æ –ø—Ä–æ—á–Ω—ã–π —Å–ø–ª–∞–≤, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç—å–µ–≤ –∏ –º–µ—Ç–∞–ª–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–±–∫–æ–π –±—Ä–æ–Ω–∏.",
            "chance": 5
        }
    }
}

craft_sets = {
    "–û—Å–µ–Ω–Ω–∏–π –õ–∏—Å—Ç üçÅ": {
        "–ö–∞–ø—é—à–æ–Ω –°—Ç—Ä–∞—Ç–µ–≥–∏–∏": {
            "–¢–µ–Ω–µ–≤–æ–π –û–±—Å–∏–¥–∏–∞–Ω": 1,
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": 2,
            "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": 3
        },
        "–ö—É—Ä—Ç–∫–∞ –ò—Å–∫–∞—Ç–µ–ª—è": {
            "–¢–µ–Ω–µ–≤–æ–π –û–±—Å–∏–¥–∏–∞–Ω": 2,
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": 4,
            "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": 5
        },
        "–ü–µ—Ä—á–∞—Ç–∫–∏ –ú–∞—Å—Ç–µ—Ä–∞": {
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": 2,
            "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": 3
        },
        "–†–µ–º–µ–Ω—å –¢–∞–∫—Ç–∏–∫–∞": {
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": 2,
            "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": 2
        },
        "–°–∞–ø–æ–≥–∏ –°–∫–∏—Ç–∞–ª—å—Ü–∞": {
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": 2,
            "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": 3
        },
        "–ö–æ–ø—å—ë –£–Ω–∏—á—Ç–æ–∂–∏—Ç–µ–ª—å –ó–ª–∞": {
            "–¢–µ–Ω–µ–≤–æ–π –û–±—Å–∏–¥–∏–∞–Ω": 4,
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ö–æ–∂–∞": 3,
            "–õ–∏—Å—Ç–æ–≤–∞—è –°—Ç–∞–ª—å": 2
        }
    }
}


ADVENTURES = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {
        "description": "üå≤ –ì—É—Å—Ç–æ–π, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ—Å, –æ–∫—É—Ç–∞–Ω–Ω—ã–π —Ç—É–º–∞–Ω–æ–º...",
        "mobs": ["–¢—É–º–∞–Ω–Ω—ã–π –í–æ–ª–∫", "–î—Ä–µ–≤–µ—Å–Ω—ã–π –°—Ç—Ä–∞–∂", "–õ–µ—Å–Ω–æ–π –ñ—É—Ç–µ–Ω—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –û–ª–µ–Ω—å", "–ö–æ—Ä–Ω–µ–ø–ª–µ—Ç"]
    },
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {
        "description": "üèöÔ∏è –ü—Ä–æ–∫–ª—è—Ç–∞—è –¥–µ—Ä–µ–≤–Ω—è, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∂—É—Ç–∫–∏–º–∏ —Ç–µ–Ω—è–º–∏...",
        "mobs": ["–ë–µ–∑–≥–ª–∞–∑—ã–π –ñ–∏—Ç–µ–ª—å", "–ü–µ–ø–µ–ª—å–Ω—ã–π –ü—ë—Å", "–ö–æ–ª–æ–∫–æ–ª–∏–π", "–°–ª–æ–º–∞–Ω–Ω—ã–π –ö—É–∫–ª–æ–≤–æ–¥", "–ñ–Ω–µ—Ü –ú–æ–ª—á–∞–Ω–∏—è"]
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {
        "description": "üè∞ –û–≥—Ä–æ–º–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å, –∑–∞–±—ã—Ç–∞—è –≤—Ä–µ–º–µ–Ω–µ–º...",
        "mobs": ["–ë–ª—É–∂–¥–∞—é—â–∏–π –†—ã—Ü–∞—Ä—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –î–µ–≤–∞", "–ì–∞—Ä–≥—É–ª—å—è-–ö–∞—Ä–∞—É–ª—å—â–∏—Ü–∞", "–ö–Ω–∏–∂–Ω—ã–π –£–∂–∞—Å", "–°—Ç–∞—Ä—ã–π –ö–ª—é—á–Ω–∏–∫"]
    }
}

LOCATIONS = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {
        "exp": (5, 10),
        "money": (10, 20),
        "duration": 15,
        "min_level": 1,
        "rarity_chances": {
            "epic": 5,
            "rare": 20,
            "common": 75
        }
    },
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {
        "exp": (15, 30),
        "money": (20, 40),
        "duration": 30,
        "min_level": 10,
        "rarity_chances": {
            "epic": 10,
            "rare": 25,
            "common": 65
        }
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {
        "exp": (40, 60),
        "money": (50, 100),
        "duration": 60,
        "min_level": 20,
        "rarity_chances": {
            "epic": 15,
            "rare": 30,
            "common": 55
        }
    }
}

MONSTERS = {
    "–¢—É–º–∞–Ω–Ω—ã–π –í–æ–ª–∫": {
        "hp": 100, "damage": 20, "dodge": 10, "counter": 0,
        "description": "–•–∏—â–Ω–∏–∫, —Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –≤ —Ç—É–º–∞–Ω–µ. –ë—ã—Å—Ç—Ä—ã–π –∏ –∫–æ–≤–∞—Ä–Ω—ã–π.",
        "rarity": "common"
    },
    "–î—Ä–µ–≤–µ—Å–Ω—ã–π –°—Ç—Ä–∞–∂": {
        "hp": 150, "damage": 10, "dodge": 0, "counter": 20,
        "description": "–°—É—â–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–Ω–µ–π –∏ –ª–∏—Å—Ç–≤—ã. –ó–∞—â–∏—â–∞–µ—Ç –ª–µ—Å –æ—Ç –Ω–µ–∑–≤–∞–Ω—ã—Ö –≥–æ—Å—Ç–µ–π.",
        "rarity": "common"
    },
    "–õ–µ—Å–Ω–æ–π –ñ—É—Ç–µ–Ω—å": {
        "hp": 100, "damage": 20, "dodge": 30, "counter": 10,
        "description": "–¢–≤–∞—Ä—å, –ø–æ—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ö–∞–º–∏ –ø—É—Ç–Ω–∏–∫–æ–≤. –ü–∏—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä–∞—Ö–æ–º –∏ –±–æ–ª—å—é.",
        "rarity": "rare"
    },
    "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –û–ª–µ–Ω—å": {
        "hp": 70, "damage": 10, "dodge": 50, "counter": 0,
        "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –¥—É—Ö –ª–µ—Å–∞. –í—Å—Ç—Ä–µ—á–∞ —Å –Ω–∏–º ‚Äî –∑–Ω–∞–∫ —Å—É–¥—å–±—ã.",
        "rarity": "rare"
    },
    "–ö–æ—Ä–Ω–µ–ø–ª–µ—Ç": {
        "hp": 200, "damage": 15, "dodge": 0, "counter": 30,
        "description": "–°—É—â–µ—Å—Ç–≤–æ –∏–∑ –∑–µ–º–ª–∏ –∏ –≤–µ—Ç–≤–µ–π. –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±—ã—á—É –∫–æ—Ä–Ω—è–º–∏.",
        "rarity": "epic"
    },

    "–ë–µ–∑–≥–ª–∞–∑—ã–π –ñ–∏—Ç–µ–ª—å": {
        "hp": 150, "damage": 20, "dodge": 30, "counter": 10,
        "description": "–ö–æ–≥–¥–∞-—Ç–æ —á–µ–ª–æ–≤–µ–∫. –¢–µ–ø–µ—Ä—å –ª–∏—à—å –æ–±–æ–ª–æ—á–∫–∞, –±—Ä–æ–¥—è—â–∞—è –ø–æ –¥–µ—Ä–µ–≤–Ω–µ.",
        "rarity": "common"
    },
    "–ü–µ–ø–µ–ª—å–Ω—ã–π –ü—ë—Å": {
        "hp": 70, "damage": 50, "dodge": 30, "counter": 5,
        "description": "–ü—ë—Å –∏–∑ –ø–µ–ø–ª–∞ –∏ –∫—Ä–∏–∫–æ–≤. –ò—â–µ—Ç —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞ –≤ –≤–µ—á–Ω–æ–π –º—É–∫–µ.",
        "rarity": "common"
    },
    "–ö–æ–ª–æ–∫–æ–ª–∏–π": {
        "hp": 200, "damage": 30, "dodge": 5, "counter": 40,
        "description": "–†–∂–∞–≤—ã–π –∫–æ–ª–æ–∫–æ–ª –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ–≤—ã. –ï–≥–æ –∑–≤–æ–Ω –ø–∞—Ä–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–∞—Ö–æ–º.",
        "rarity": "rare"
    },
    "–°–ª–æ–º–∞–Ω–Ω—ã–π –ö—É–∫–ª–æ–≤–æ–¥": {
        "hp": 100, "damage": 20, "dodge": 60, "counter": 0,
        "description": "–ú–∞—Å—Ç–µ—Ä –º–∞—Ä–∏–æ–Ω–µ—Ç–æ–∫, —Å—Ç–∞–≤—à–∏–π –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö.",
        "rarity": "rare"
    },
    "–ñ–Ω–µ—Ü –ú–æ–ª—á–∞–Ω–∏—è": {
        "hp": 500, "damage": 20, "dodge": 0, "counter": 20,
        "description": "–°–æ–±–∏—Ä–∞–µ—Ç –¥—É—à–∏ —Ç–µ—Ö, –∫—Ç–æ –∫—Ä–∏—á–∞–ª –≤ —Ç–µ–º–Ω–æ—Ç–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç.",
        "rarity": "epic"
    },
    "–ë–ª—É–∂–¥–∞—é—â–∏–π –†—ã—Ü–∞—Ä—å": {
        "hp": 150, "damage": 70, "dodge": 10, "counter": 50,
        "description": "–ö–æ–≥–¥–∞-—Ç–æ –∑–∞—â–∏—Ç–Ω–∏–∫ –∑–∞–º–∫–∞. –¢–µ–ø–µ—Ä—å –ª–∏—à—å —Ç–µ–Ω—å –≤ –±—Ä–æ–Ω–µ.",
        "rarity": "common"
    },
    "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –î–µ–≤–∞": {
        "hp": 400, "damage": 30, "dodge": 20, "counter": 30,
        "description": "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ç–∏—à–∏–Ω–µ. –ï—ë –ø–ª–∞—á —Å–ª—ã—à–µ–Ω –¥–∞–∂–µ —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã.",
        "rarity": "common"
    },
    "–ì–∞—Ä–≥—É–ª—å—è-–ö–∞—Ä–∞—É–ª—å—â–∏—Ü–∞": {
        "hp": 1000, "damage": 10, "dodge": 5, "counter": 5,
        "description": "–ö–∞–º–µ–Ω–Ω–æ–µ —á—É–¥–æ–≤–∏—â–µ, —á—Ç–æ –æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä—É–∏–Ω—ã. –ù–µ—É—Å—Ç–∞–Ω–Ω–∞ –∏ –±–µ—Å–ø–æ—â–∞–¥–Ω–∞.",
        "rarity": "rare"
    },
    "–ö–Ω–∏–∂–Ω—ã–π –£–∂–∞—Å": {
        "hp": 500, "damage": 200, "dodge": 0, "counter": 0,
        "description": "–°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π. –ü–æ–≥–ª–æ—â–∞–µ—Ç —Ä–∞–∑—É–º.",
        "rarity": "rare"
    },
    "–°—Ç–∞—Ä—ã–π –ö–ª—é—á–Ω–∏–∫": {
        "hp": 2000, "damage": 100, "dodge": 20, "counter": 30,
        "description": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–∞–º–∫–∞. –ë–µ–∑ –Ω–µ–≥–æ –¥–≤–µ—Ä–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è... –∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è.",
        "rarity": "epic"
    }
}

def roll_drop():
    material_pool = []

    for rarity, materials in DROP.items():
        for name, data in materials.items():
            material_pool.append((name, data["chance"], rarity))

    drop_roll = random.uniform(0, 100)
    cumulative = 0

    for name, chance, rarity in material_pool:
        cumulative += chance
        if drop_roll <= cumulative:
            return name, rarity  # ‚úÖ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è

    return None, None  # –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ



def get_items_by_slot(slot: str):
    valid_slots = ["head", "body", "gloves", "legs", "feet", "weapon"]
    if slot not in valid_slots:
        raise ValueError(f"Invalid slot name: {slot}")

    slot_items = {
        "head": [],
        "body": [],
        "gloves": [],
        "legs": [],
        "feet": [],
        "weapon": []
    }

    for power_type in SETS.values():
        for set_name, set_data in power_type.items():
            for item in set_data["items"]:
                if slot in item:
                    slot_items[slot].append(item)

    return slot_items[slot]


DROP_CHANCES = {
    "common": {"weak": 0.15, "strong": 0.05},
    "rare": {"weak": 0.20, "strong": 0.10},
    "epic": {"weak": 0.30, "strong": 0.15}
}


def random_strong_item():
    set_name = random.choice(list(SETS["strong"].keys()))
    chosen_set = SETS["strong"][set_name]
    item = random.choice(chosen_set["items"])
    return set_name, item

def random_weak_item():
    set_name = random.choice(list(SETS["weak"].keys()))
    chosen_set = SETS["weak"][set_name]
    item = random.choice(chosen_set["items"])
    return set_name, item

def get_random_monster(location_name: str, location_mobs: list):
    rarity_chances = LOCATIONS.get(location_name, {}).get("rarity_chances", {
        "epic": 10,
        "rare": 30,
        "common": 60
    })

    rarity_pool = {
        "epic": [],
        "rare": [],
        "common": []
    }

    for name in location_mobs:
        monster = MONSTERS.get(name)
        if not monster:
            continue
        rarity = monster.get("rarity", "common")
        monster = monster.copy()
        monster["name"] = name
        rarity_pool[rarity].append(monster)

    rarity = random.choices(
        population=list(rarity_chances.keys()),
        weights=list(rarity_chances.values()),
        k=1
    )[0]

    pool = rarity_pool.get(rarity, rarity_pool["common"])
    return random.choice(pool)

allowed_locations = set(locations.keys())

def get_locations_text(user_id):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–∏–Ω–∞:\n\n"

    try:
        response = supabase.table("clan_battle") \
            .select("pin") \
            .eq("user_id", user_id) \
            .limit(1) \
            .execute()

        data = response.data or []

        if data and data[0].get("pin"):
            pin_location = data[0]["pin"]
            text += f"üìç –í–∞—à –ø–∏–Ω: {pin_location}\n\n"
        else:
            text += "üìç –í–∞—à –ø–∏–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏–Ω–∞ –∏–≥—Ä–æ–∫–∞: {e}")
        text += "üìç –í–∞—à –ø–∏–Ω: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
    for name, desc in locations.items():
        text += f"{name}\n{desc}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–æ–≤–æ–π –≤–æ–π–Ω–µ
    text += "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞ (–ö–í) –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã!\n"

    return text




def get_locations_inline_kb() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"loc_{name}")]
        for name in locations.keys()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_pvp_message(my, opponent):
    return (
        f"üõ°Ô∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n"
        f"üë§ <b>{opponent['username']}</b>\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {opponent['health']}\n"
        f"üí• –£—Ä–æ–Ω: {opponent['attack']}\n"
        f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {opponent.get('dodge', 0)}%\n"
        f"üéØ –ö—Ä–∏—Ç: {opponent.get('crit', 0)}%\n"
        f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {opponent.get('counter_attack', 0)}%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )


def get_pvp_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üó°Ô∏è –£–¥–∞—Ä–∏—Ç—å", callback_data="pvp_attack"),
            InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="pvp_skip")
        ],
        [
            InlineKeyboardButton(text="‚ùå –£–π—Ç–∏ —Å –∞—Ä–µ–Ω—ã", callback_data="pvp_cancel")
        ]
    ])


async def craft_item(user_id: int, item_name: str, needed_materials: dict, supabase):
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    for material_name, required_count in needed_materials.items():
        materials_resp = supabase.table("materials")\
            .select("count")\
            .eq("user_id", user_id)\
            .eq("material_name", material_name)\
            .execute()
        if not materials_resp.data or materials_resp.data[0]["count"] < required_count:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_name}"

    # 2. –°–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    for material_name, required_count in needed_materials.items():
        materials_resp = supabase.table("materials")\
            .select("count")\
            .eq("user_id", user_id)\
            .eq("material_name", material_name)\
            .execute()
        current_count = materials_resp.data[0]["count"]
        supabase.table("materials")\
            .update({"count": current_count - required_count})\
            .eq("user_id", user_id)\
            .eq("material_name", material_name)\
            .execute()

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—é–∫–∑–∞–∫–µ
    existing = supabase.table("backpack")\
        .select("count")\
        .eq("user_id", user_id)\
        .eq("item_name", item_name)\
        .execute()

    if existing.data:
        current_count = existing.data[0]["count"]
        supabase.table("backpack")\
            .update({"count": current_count + 1})\
            .eq("user_id", user_id)\
            .eq("item_name", item_name)\
            .execute()
    else:
        supabase.table("backpack")\
            .insert({"user_id": user_id, "item_name": item_name, "count": 1})\
            .execute()

    return f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {item_name}"

# ---------- Clan selection ----------
def get_user_backpack(user_id: int, supabase: Client):
    response = supabase.table("backpack").select("*").eq("user_id", user_id).execute()
    return response.data if response.data else []


async def ask_clan_choice(message: types.Message):
    buttons = [[InlineKeyboardButton(text=clan, callback_data=f"clan_{clan.split()[0]}")] for clan in CLANS.keys()]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    description = (
        "üß≠ <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞–Ω–æ–≤:</b>\n\n"
        "üåå <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî –≤–æ–∏–Ω—ã —Å–≤–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ—Ä—è–¥–∫–∞\n"
        "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —Å–∏–º–≤–æ–ª –Ω–∞–¥–µ–∂–¥—ã –∏ —Å–∏–ª—ã –¥—É—Ö–∞\n"
        "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —Å–∫—Ä—ã—Ç–Ω—ã–µ –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ –±–æ–π—Ü—ã\n"
        "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî –º—É–¥—Ä–µ—Ü—ã, –≤–ª–∞–¥–µ—é—â–∏–µ —Ç–∞–π–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"
    )
    await message.answer(description, reply_markup=keyboard)

@dp.message(lambda message: message.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
async def start_pvp_search(message: Message):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤ PVP
    existing_status = supabase.table("adventure_status").select("*").eq("user_id", user_id).execute()
    if existing_status.data:
        status = existing_status.data[0]
        if status.get("pvp") is True:
            await message.answer("‚öîÔ∏è –í—ã —É–∂–µ –Ω–∞ –∞—Ä–µ–Ω–µ.")
            return
        else:
            await message.answer("‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å PvP —Å–µ–π—á–∞—Å.")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_response = supabase.table("users").select("username, health, attack, dodge, crit, counter_attack").eq("user_id", user_id).execute()

    if not user_response.data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.")
        return

    user_data = user_response.data[0]
    username = user_data["username"]

    # –ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    opponent_search = supabase.table("adventure_status") \
        .select("user_id") \
        .eq("pvp", True) \
        .is_("opponent_id", None) \
        .neq("user_id", user_id) \
        .limit(1).execute()

    if opponent_search.data:
        opponent_id = opponent_search.data[0]["user_id"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —Å–æ–∑–¥–∞–µ–º –±–æ–π
        for uid, opp_id in [(user_id, opponent_id), (opponent_id, user_id)]:
            player_data = supabase.table("users").select("username, health, attack, dodge, crit, counter_attack").eq("user_id", uid).execute().data[0]

            supabase.table("adventure_status").upsert({
                "user_id": uid,
                "username": player_data["username"],
                "pvp": True,
                "opponent_id": opp_id,
                "pvp_turn": 0,
                "last_action": None,
                "health": player_data["health"],
                "attack": player_data["attack"],
                "dodge": player_data["dodge"],
                "crit": player_data["crit"],
                "counter_attack": player_data["counter_attack"]
            }).execute()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–∞—Ö
        user_info = supabase.table("users").select("username, health, attack, dodge, crit, counter_attack").eq("user_id", user_id).execute().data[0]
        opp_info = supabase.table("users").select("username, health, attack, dodge, crit, counter_attack").eq("user_id", opponent_id).execute().data[0]

        # –ö–Ω–æ–ø–∫–∏ PvP
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üó°Ô∏è –£–¥–∞—Ä–∏—Ç—å", callback_data="pvp_attack"),
                InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="pvp_skip")
            ],
            [
                InlineKeyboardButton(text="‚ùå –£–π—Ç–∏ —Å –∞—Ä–µ–Ω—ã", callback_data="pvp_cancel")
            ]
        ])

        await bot.send_message(user_id, build_pvp_message(user_info, opp_info), reply_markup=keyboard)
        await bot.send_message(opponent_id, build_pvp_message(opp_info, user_info), reply_markup=keyboard)

    else:
        # –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        supabase.table("adventure_status").upsert({
            "user_id": user_id,
            "username": username,
            "pvp": True,
            "opponent_id": None,
            "pvp_turn": 0,
            "last_action": None,
            "health": user_data["health"],
            "attack": user_data["attack"],
            "dodge": user_data["dodge"],
            "crit": user_data["crit"],
            "counter_attack": user_data["counter_attack"]
        }).execute()

        await message.answer(
            "üîç –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...",
            reply_markup=cancel_search_kb
        )

async def handle_adventure(user_id: int, location_name: str, monster: dict, duration: int):
    await asyncio.sleep(duration)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º–∞
    premium_resp = supabase.table("users").select("premium_until").eq("user_id", user_id).execute()
    premium_until_str = premium_resp.data[0].get("premium_until") if premium_resp.data else None
    premium_active = False

    if premium_until_str:
        premium_until = datetime.fromisoformat(premium_until_str.replace("Z", "+00:00"))
        now = datetime.now(timezone.utc)
        if premium_until > now:
            premium_active = True

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    location = LOCATIONS.get(location_name)
    base_exp = random.randint(*location["exp"])
    base_money = random.randint(*location["money"])
    bonus_exp = int(base_exp * 0.3) if premium_active else 0
    bonus_money = int(base_money * 0.5) if premium_active else 0
    total_exp = base_exp + bonus_exp
    total_money = base_money + bonus_money

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–ø—ã—Ç–∞
    user_data = supabase.table("users").select("money").eq("user_id", user_id).execute()
    current_money = user_data.data[0]["money"] if user_data.data else 0

    await add_experience(user_id, total_exp)

    supabase.table("users").update({
        "money": current_money + total_money
    }).eq("user_id", user_id).execute()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
    supabase.table("adventure_status").delete().eq("user_id", user_id).execute()

    # –î—Ä–æ–ø –ª–æ–≥–∏–∫–∞
    rarity_key = monster["rarity"].lower()
    drop_chances = DROP_CHANCES.get(rarity_key, {"weak": 0.10, "strong": 0.02})
    drop_roll = random.random()
    item_dropped = None

    if drop_roll < drop_chances["weak"]:
        set_name, item = random_weak_item()
        item_dropped = item
        rarity_type = "—Å–ª–∞–±—ã–π"
    elif drop_roll < drop_chances["weak"] + drop_chances["strong"]:
        set_name, item = random_strong_item()
        item_dropped = item
        rarity_type = "—Å–∏–ª—å–Ω—ã–π"

    if item_dropped:
        item_name = item_dropped["name"]
        await bot.send_message(
            user_id,
            f"üéâ –¢–µ–±–µ –≤—ã–ø–∞–ª {rarity_type} –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–µ—Ç–∞ <b>{set_name}</b>:\n"
            f"üß© <b>{item_name}</b>"
        )
        existing = supabase.table("backpack").select("count").eq("user_id", user_id).eq("item_name", item_name).execute()
        if existing.data:
            current_count = existing.data[0]["count"]
            supabase.table("backpack").update({
                "count": current_count + 1
            }).eq("user_id", user_id).eq("item_name", item_name).execute()
        else:
            supabase.table("backpack").insert({
                "user_id": user_id,
                "item_name": item_name,
                "count": 1
            }).execute()
    else:
        material_name, material_rarity = roll_drop()
        if material_name:
            await bot.send_message(
                user_id,
                f"ü™µ –¢—ã –Ω–∞—à—ë–ª —Ä–µ—Å—É—Ä—Å:\n"
                f"üîπ <b>{material_name}</b>"
            )

            existing = supabase.table("materials").select("count").eq("user_id", user_id).eq("material_name", material_name).execute()
            if existing.data:
                current_count = existing.data[0]["count"]
                supabase.table("materials").update({
                    "count": current_count + 1
                }).eq("user_id", user_id).eq("material_name", material_name).execute()
            else:
                supabase.table("materials").insert({
                    "user_id": user_id,
                    "material_name": material_name,
                    "count": 1
                }).execute()

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    exp_text = f"{base_exp}+{bonus_exp}({total_exp})" if premium_active else str(base_exp)
    money_text = f"{base_money}+{bonus_money}({total_money})" if premium_active else str(base_money)

    await bot.send_message(
        user_id,
        f"‚úÖ <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üèûÔ∏è –õ–æ–∫–∞—Ü–∏—è: <b>{location_name}</b>\n"
        f"‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π –≤—Ä–∞–≥: <b>{monster['name']}</b>\n\n"
        f"üéñ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: <b>{exp_text}</b>\n"
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{money_text}</b>",
        reply_markup=main_menu_kb
    )

@dp.message(lambda message: message.text == "üî® –ö—Ä–∞—Ñ—Ç")
async def handle_craft(message: types.Message):
    crafter_sets = SETS.get("crafter", {})

    if not crafter_sets:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–µ—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(text=set_name, callback_data=f"craft_set:{set_name}")]
        for set_name in crafter_sets.keys()
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("üõ† –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å?", reply_markup=markup)

@dp.message(lambda message: message.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏—Ç–≤—ã")
async def send_battle_results(message: Message):
    try:
        allowed_locations = {
            "üè∞ –ü—Ä–æ–∫–ª—è—Ç–∞—è –¶–∏—Ç–∞–¥–µ–ª—å",
            "üåã –£—Ç—Ä–æ–±–∞ –í—É–ª–∫–∞–Ω–∞",
            "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –ó–∞–±–≤–µ–Ω–∏—è",
            "üëÅÔ∏è –û–±–∏—Ç–µ–ª—å –ò–ª–ª—é–∑–∏–π"
        }

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clancv
        clancv_table = supabase.table("clancv").select("*").execute()
        clancv_rows = clancv_table.data or []

        result_lines = []

        for location in allowed_locations:
            controlling_clan = None

            for row in clancv_rows:
                if row.get(location) == True:
                    controlling_clan = row["clan_name"]
                    break

            if controlling_clan:
                result_lines.append(f"{location} ‚Äî –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–ª–∞–Ω–∞ *{controlling_clan}*")
            else:
                result_lines.append(f"{location} ‚Äî –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤")

        result_text = "\n".join(result_lines)

        await message.answer(
            text=f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞–Ω–æ–≤–æ–π –±–∏—Ç–≤—ã:*\n\n{result_text}",
            parse_mode="Markdown"
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∏—Ç–≤—ã.")



@dp.message(lambda message: message.text in ["ü™ñ –ì–æ–ª–æ–≤–∞", "üëï –¢–µ–ª–æ", "üß§ –†—É–∫–∏", "üëñ –ù–æ–≥–∏", "üëü –°—Ç—É–ø–Ω–∏", "üó°Ô∏è –û—Ä—É–∂–∏–µ"])
async def show_items(message: types.Message):
    category = None
    if message.text == "ü™ñ –ì–æ–ª–æ–≤–∞":
        category = "head"
    elif message.text == "üëï –¢–µ–ª–æ":
        category = "body"
    elif message.text == "üß§ –†—É–∫–∏":
        category = "gloves"
    elif message.text == "üëñ –ù–æ–≥–∏":
        category = "legs"
    elif message.text == "üëü –°—Ç—É–ø–Ω–∏":
        category = "feet"
    elif message.text == "üó°Ô∏è –û—Ä—É–∂–∏–µ":
        category = "weapon"

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    keyboard = await create_inline_keyboard_from_backpack(message.from_user.id, category)

    if keyboard:
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è {message.text.lower()}: ", reply_markup=keyboard)
    else:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {message.text.lower()}.")


@dp.message(lambda message: message.text in ["‚ùå –ì–æ–ª–æ–≤–∞", "‚ùå –¢–µ–ª–æ", "‚ùå –†—É–∫–∏", "‚ùå –ù–æ–≥–∏", "‚ùå –°—Ç—É–ø–Ω–∏", "‚ùå –û—Ä—É–∂–∏–µ"])
async def unequip_item(message: types.Message):
    user_id = message.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_map = {
        "‚ùå –ì–æ–ª–æ–≤–∞": "head",
        "‚ùå –¢–µ–ª–æ": "body",
        "‚ùå –†—É–∫–∏": "gloves",
        "‚ùå –ù–æ–≥–∏": "legs",
        "‚ùå –°—Ç—É–ø–Ω–∏": "feet",
        "‚ùå –û—Ä—É–∂–∏–µ": "weapon"
    }
    category = category_map[message.text]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = supabase.table("users").select("*").eq("user_id", user_id).single().execute()
    if not user_data.data:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    equipped_item = user_data.data.get(category)

    if not equipped_item or equipped_item == "–Ω–µ—Ç":
        await message.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–µ–¥–º–µ—Ç–∞
    hp_bonus, damage_bonus = get_item_stats(equipped_item)

    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    new_health = max(0, user_data.data.get("health", 0) - hp_bonus)
    new_attack = max(0, user_data.data.get("attack", 0) - damage_bonus)

    supabase.table("users").update({
        category: "–Ω–µ—Ç",
        "health": new_health,
        "attack": new_attack
    }).eq("user_id", user_id).execute()

    # –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä—é–∫–∑–∞–∫
    backpack_response = supabase.table("backpack").select("count")\
        .eq("user_id", user_id).eq("item_name", equipped_item).execute()

    backpack_data = backpack_response.data[0] if backpack_response.data else None

    if backpack_data:
        new_count = backpack_data["count"] + 1
        supabase.table("backpack").update({"count": new_count})\
            .eq("user_id", user_id).eq("item_name", equipped_item).execute()
    else:
        supabase.table("backpack").insert({
            "user_id": user_id,
            "item_name": equipped_item,
            "count": 1
        }).execute()

    await message.answer(f"‚ùå –°–Ω—è—Ç–æ: <b>{equipped_item}</b>")



@dp.message(lambda message: message.text == "üìå –°–¥–µ–ª–∞—Ç—å –ø–∏–Ω")
async def send_pin_menu(message: types.Message):
    user_id = message.from_user.id
    text = get_locations_text(user_id)
    kb = get_locations_inline_kb()
    await message.answer(text, reply_markup=kb)


# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    response = supabase.table("users").select("username, clan").eq("user_id", user_id).execute()
    row = response.data[0] if response.data else None

    if row and row.get("username") and row.get("clan"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    elif row and row.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")


    async def start_adventure(message: types.Message, location_name: str):
        location = LOCATIONS.get(location_name)
        adventure = ADVENTURES.get(location_name)

        if not location or not adventure:
            await message.answer("‚ùó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        duration = location["duration"]
        user_id = message.from_user.id

        # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–æ–Ω—Å—Ç—Ä –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–¥–∫–æ—Å—Ç—ñ
        monster = get_random_monster(adventure['mobs'])

        name = monster["name"]
        hp = monster["hp"]
        dmg = monster["damage"]
        dodge = monster["dodge"]
        counter = monster["counter"]
        desc = monster["description"]
        rarity = monster["rarity"].capitalize()

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–∏–≥–æ–¥–∏ —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á –∑ –º–æ–Ω—Å—Ç—Ä–æ–º
        await message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ <b>{location_name}</b>\n\n"
            f"üëæ <b>–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞: {name}</b>\n"
            f"üìñ <i>{desc}</i>\n"
            f"üè∑ –†–µ–¥–∫–æ—Å—Ç—å: <b>{rarity}</b>\n\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{hp}</b>\n"
            f"üí• –£—Ä–æ–Ω: <b>{dmg}</b>\n"
            f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: <b>{dodge}%</b>\n"
            f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>{counter}%</b>\n\n"
            f"‚è≥ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è <b>{duration}</b> —Å–µ–∫—É–Ω–¥..."
        )

        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        await asyncio.sleep(duration)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥—É
    exp = random.randint(*location["exp"])
    money = random.randint(*location["money"])

    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä–æ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_resp = supabase.table("users").select("money").eq("user_id", user_id).execute()
    current_money = user_resp.data[0]["money"] if user_resp.data else 0

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å–≤—ñ–¥ —Ç–∞ –≥—Ä–æ—à—ñ
    await add_experience(user_id, exp)
    supabase.table("users").update({
        "money": current_money + money
    }).eq("user_id", user_id).execute()

    # –ü—ñ–¥—Å—É–º–æ–∫
    await bot.send_message(
        user_id,
        f"‚úÖ <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üèûÔ∏è –õ–æ–∫–∞—Ü–∏—è: <b>{location_name}</b>\n"
        f"‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω –≤—Ä–∞–≥: <b>{name}</b>\n\n"
        f"üéñ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: <b>{exp}</b>\n"
        f"üí∞ –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{money}</b>",
        reply_markup=main_menu_kb
    )


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------

@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
    if user_id in waiting_for_nick:
        nickname = text

        if re.search(r"[;:/.\"<>'\\\\]", nickname) or "script" in nickname.lower():
            await message.answer("‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–æ–≤–æ.")
            return
        if not (3 <= len(nickname) <= 9):
            await message.answer("‚ùó –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if not re.match(r"^[A-Za-z0-9_]+$", nickname):
            await message.answer("‚ùó –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
            return

        supabase.table("users").upsert({"user_id": user_id, "username": nickname}).execute()
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{nickname}</b>! –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
        return


    # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        response = supabase.table("users").select("*").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None

        if row:
            clan_desc = CLANS.get(row.get("clan", ""), "")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞
            premium_status = "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
            premium_remaining = ""

            premium_until_str = row.get("premium_until")
            if premium_until_str:
                premium_until = datetime.fromisoformat(premium_until_str.replace("Z", "+00:00"))
                now = datetime.now(timezone.utc)
                if premium_until > now:
                    premium_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                    remaining = premium_until - now
                    days = remaining.days
                    hours = remaining.seconds // 3600
                    premium_remaining = f"\n–û—Å—Ç–∞–ª–æ—Å—å: {days} –¥. {hours} —á."
                else:
                    premium_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"

            profile_text = (
                f"<b>{row['username']}</b> | <code>{user_id}</code>\n"
                f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {row['status']}\n"
                f"–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: {premium_status}{premium_remaining}\n\n"
                f"üåü –£—Ä–æ–≤–µ–Ω—å: {row['level']}\n"
                f"–û–ø—ã—Ç: {row['exp']} / {row['exp_max']}\n"
                f"–û—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏: {row.get('level_points', 0)}\n"
                f"‚ù§Ô∏è {row['health']} | üó° {row['attack']}\n"
                f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {row.get('dodge', 0)}%\n"
                f"üéØ –ö—Ä–∏—Ç: {row.get('crit', 0)}%\n"
                f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {row.get('counter_attack', 0)}%\n\n"
                f"üí∞ –î–µ–Ω—å–≥–∏: {row['money']} | üíé –ê–ª–º–∞–∑—ã: {row['diamonds']}\n\n"
                f"ü•ã –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:\n"
                f"–ì–æ–ª–æ–≤–∞: {row['head']}\n"
                f"–¢–µ–ª–æ: {row['body']}\n"
                f"–ü–µ—Ä—á–∞—Ç–∫–∏: {row.get('gloves')}\n"
                f"–ù–æ–≥–∏: {row['legs']}\n"
                f"–°—Ç—É–ø–Ω–∏: {row['feet']}\n"
                f"–û—Ä—É–∂–∏–µ: {row['weapon']}\n"
                f"üí™ –ö–ª–∞–Ω: {row.get('clan', '–Ω–µ—Ç')}"
            )

            await message.answer(profile_text, reply_markup=profile_kb)
        else:
            waiting_for_nick.add(user_id)
            await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

    elif text == "üéí –†—é–∫–∑–∞–∫":
        await message.answer("üéí –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:", reply_markup=backpack_keyboard)


    elif text == "‚öîÔ∏è –ù–∞–¥–µ—Ç—å":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞–¥–µ—Ç—å:", reply_markup=equip_kb)
    elif text == "‚ùå –°–Ω—è—Ç—å":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞–¥–µ—Ç—å:", reply_markup=unequip_kb)


    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä—é–∫–∑–∞–∫
        await message.answer("–í–∞—à–∏ –≤–µ—â–∏ –≤ —Ä—é–∫–∑–∞–∫–µ:", reply_markup=profile_kb)


    elif text == "‚öôÔ∏è –ü—Ä–æ–∫–∞—á–∫–∞":
        upgrade_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"), KeyboardButton(text="üó°Ô∏è –£—Ä–æ–Ω")],
                [KeyboardButton(text="üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ"), KeyboardButton(text="üéØ –ö—Ä–∏—Ç"),
                 KeyboardButton(text="üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ")]
            ],
            resize_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å:", reply_markup=upgrade_kb)
    elif text in ("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ", "üó°Ô∏è –£—Ä–æ–Ω", "üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ", "üéØ –ö—Ä–∏—Ç", "üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞"):
        resp = supabase.table("users").select("level_points", "health", "attack", "dodge", "crit", "counter_attack").eq(
            "user_id", user_id).execute()
        if not resp.data:
            return
        user = resp.data[0]
        points = user["level_points"]
        if points <= 0:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤ –ø—Ä–æ–∫–∞—á–∫–∏.", reply_markup=profile_kb)
            return

        new_points = points - 1
        updates = {"level_points": new_points}
        msg = ""

        if text == "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ":
            updates["health"] = user["health"] + 10
            msg = "‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ +10!</b>\n–í—ã —Å—Ç–∞–ª–∏ –∫—Ä–µ–ø—á–µ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ."
        elif text == "üó°Ô∏è –£—Ä–æ–Ω":
            updates["attack"] = user["attack"] + 10
            msg = "üó°Ô∏è <b>–ê—Ç–∞–∫–∞ +10!</b>\n–¢–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å!"
        elif text == "üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ":
            if user["dodge"] >= 20:
                await message.answer("‚ùó –£–∫–ª–æ–Ω–µ–Ω–∏–µ —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ (20%).")
                return
            updates["dodge"] = min(user["dodge"] + 2, 20)
            msg = f"üåÄ <b>–£–∫–ª–æ–Ω–µ–Ω–∏–µ +2%</b>\n–¢–µ–ø–µ—Ä—å –≤—ã —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ—Å—å —á–∞—â–µ!"
        elif text == "üéØ –ö—Ä–∏—Ç":
            if user["crit"] >= 30:
                await message.answer("‚ùó –ö—Ä–∏—Ç —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ (30%).")
                return
            updates["crit"] = min(user["crit"] + 2, 30)
            msg = f"üéØ <b>–ö—Ä–∏—Ç +2%</b>\n–¢—ã —Å—Ç–∞–ª –Ω–∞–Ω–æ—Å–∏—Ç—å –±–æ–ª—å—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–¥–∞—Ä–æ–≤!"
        elif text == "üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞":
            if user["counter_attack"] >= 20:
                await message.answer("‚ùó –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ (20%).")
                return
            updates["counter_attack"] = min(user["counter_attack"] + 2, 20)
            msg = f"üîÅ <b>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ +2%</b>\n–¢—ã –Ω–∞—É—á–∏–ª—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É–¥–∞—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!"

        supabase.table("users").update(updates).eq("user_id", user_id).execute()

        updated = supabase.table("users").select("level_points", "health", "attack", "dodge", "crit",
                                                 "counter_attack").eq("user_id", user_id).execute()
        new_user = updated.data[0]

        await message.answer(f"{msg}\n\n"
                             f"üß¨ <b>–¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
                             f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{new_user['health']}</b>\n"
                             f"üó°Ô∏è –£—Ä–æ–Ω: <b>{new_user['attack']}</b>\n"
                             f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: <b>{new_user['dodge']}%</b>\n"
                             f"üéØ –ö—Ä–∏—Ç: <b>{new_user['crit']}%</b>\n"
                             f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>{new_user['counter_attack']}%</b>\n"
                             f"üéØ –û—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏: <b>{new_user['level_points']}</b>")

    elif text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=profile_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    elif text == "‚öîÔ∏è –ê—Ä–µ–Ω–∞":
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∞—Ä–µ–Ω—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=arena_kb)



    elif text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è":
        locations_info = ""
        for name, data in LOCATIONS.items():
            if name not in ADVENTURES:
                continue
            exp_range = f"{data['exp'][0]}‚Äì{data['exp'][1]}"
            money_range = f"{data['money'][0]}‚Äì{data['money'][1]}"
            duration = data["duration"]
            min_level = data.get("min_level", 1)
            locations_info += (
                f"üìç <b>{name}</b>\n"
                f"{ADVENTURES[name]['description']}\n"
                f"üîí –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: <b>{min_level}</b>\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b> | üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b> | ‚è± –í—Ä–µ–º—è: {duration} —Å–µ–∫.\n\n"
            )

        buttons = [
            [InlineKeyboardButton(text=name, callback_data=f"preview_{name}")]
            for name in LOCATIONS.keys() if name in ADVENTURES
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(f"üåç <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n{locations_info}", reply_markup=keyboard)

    elif text == "üí™ –ú–æ–π –∫–ª–∞–Ω":
        response = supabase.table("users").select("clan").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None
        if row and row.get("clan"):
            clan = row["clan"]
            clan_desc = CLANS.get(clan, "")
            members_resp = supabase.table("clan_members").select("user_id").eq("clan_name", clan).execute()
            members = members_resp.data or []
            user_ids = [m["user_id"] for m in members]
            users_resp = supabase.table("users").select("user_id, username").in_("user_id", user_ids).execute()
            id_to_username = {u["user_id"]: u["username"] for u in users_resp.data or []}
            members_list = "\n".join(f"- {id_to_username.get(uid, uid)}" for uid in user_ids) or "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            await message.answer(f"üí™ –ö–ª–∞–Ω: <b>{clan}</b>\n\n{clan_desc}\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_list}",
                                 reply_markup=main_menu_kb)
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω.", reply_markup=main_menu_kb)
            await ask_clan_choice(message)

    elif text == "üèÜ –¢–æ–ø":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:", reply_markup=top_menu_kb)

    elif text == "üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é":
        response = supabase.table("users").select("user_id, username, level").order("level", desc=True).execute()
        players = response.data or []
        top_10 = players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} üåü {p['level']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
        await message.answer(f"üåü <b>–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place}",
                             reply_markup=top_menu_kb)

    elif text == "üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º":
        response = supabase.table("users").select("user_id, username, money").order("money", desc=True).execute()
        players = response.data or []
        top_10 = players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} üí∞ {p['money']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
        await message.answer(f"üí∞ <b>–¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place}",
                             reply_markup=top_menu_kb)


    elif text == "‚öîÔ∏è –¢–æ–ø –ø–æ PvP –ø–æ–±–µ–¥–∞–º":
        response = supabase.table("users").select("user_id, username, pvp_win").order("pvp_win", desc=True).execute()
        players = response.data or []

        filtered_players = [p for p in players if p.get("pvp_win") and p["pvp_win"] > 0]
        top_10 = filtered_players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} ‚öîÔ∏è {p['pvp_win']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(filtered_players) if p["user_id"] == user_id), None)
        await message.answer(
            f"‚öîÔ∏è <b>–¢–æ–ø –ø–æ PvP –ø–æ–±–µ–¥–∞–º:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place if place else '‚Äî'}",
            reply_markup=top_menu_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    elif text == "‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=forge_menu_kb)

    elif text in ("‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞"):
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=forge_menu_kb)



    elif text == "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ç–æ—Ä–≥–æ–≤–ª–∏:", reply_markup=trade_menu_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await message.answer("üõí –û—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω...")


    elif text == "üíé –î–æ–Ω–∞—Ç –ú–∞–≥–∞–∑–∏–Ω":
        await message.answer("üíé –î–æ–Ω–∞—Ç-–º–∞–≥–∞–∑–∏–Ω:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=donate_shop_kb)


    elif text == "üëë –ü—Ä–µ–º–∏—É–º":
        premium_text = (
            "üëë *–ü—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç*\n\n"
            "üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 –∞–ª–º–∞–∑–æ–≤\n"
            "üïò –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 7 –¥–Ω–µ–π\n"
            "üìà +30% –æ–ø—ã—Ç–∞\n"
            "üí∞ +50% –¥–µ–Ω–µ–≥\n"
            "üçÄ +10% —É–¥–∞—á–∏\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É–∂–µ —Å–µ–π—á–∞—Å!"
        )
        buy_premium_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="buy_premium")]
            ]
        )
        await message.answer(premium_text, reply_markup=buy_premium_kb, parse_mode="Markdown")

    elif text == "üíé –ê–ª–º–∞–∑—ã":
        diamonds_text = (
            "üíé *–ü–æ–∫—É–ø–∫–∞ –∞–ª–º–∞–∑–æ–≤*\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5,000 –¥–µ–Ω–µ–≥\n"
            "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 –∞–ª–º–∞–∑–æ–≤\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å."
        )
        buy_diamonds_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å 100 –∞–ª–º–∞–∑–æ–≤", callback_data="buy_diamonds")]
            ]
        )
        await message.answer(diamonds_text, reply_markup=buy_diamonds_kb, parse_mode="Markdown")

        await message.answer(premium_text, reply_markup=buy_premium_kb, parse_mode="Markdown")

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (—Ç–æ—Ä–≥–æ–≤–ª—è)":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª '–¢–æ—Ä–≥–æ–≤–ª—è':", reply_markup=trade_menu_kb)

    elif text == "üè™ –†—ã–Ω–æ–∫":
        await message.answer("üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=market_menu_kb)


    elif text == "üõ°Ô∏è –ö–ª–∞–Ω–æ–≤–∞—è –±–∏—Ç–≤–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=clan_battle_kb)


@dp.callback_query(lambda c: c.data.startswith("remove_lot_"))
async def handle_remove_lot(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lot_id = int(callback_query.data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ—Ç
    result = supabase.table("rynok") \
        .select("*") \
        .eq("id", lot_id) \
        .limit(1) \
        .execute()

    if not result.data:
        await callback_query.answer("‚ùó –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    lot = result.data[0]
    if lot["user_id"] != user_id:
        await callback_query.answer("‚ùó –≠—Ç–æ –Ω–µ –≤–∞—à –ª–æ—Ç.", show_alert=True)
        return

    item_name = lot["item_name"]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—é–∫–∑–∞–∫
    backpack = supabase.table("backpack") \
        .select("count") \
        .eq("user_id", user_id) \
        .eq("item_name", item_name) \
        .limit(1) \
        .execute()

    if backpack.data:
        current_count = backpack.data[0]["count"]
        supabase.table("backpack") \
            .update({"count": current_count + 1}) \
            .eq("user_id", user_id) \
            .eq("item_name", item_name) \
            .execute()
    else:
        supabase.table("backpack").insert({
            "user_id": user_id,
            "item_name": item_name,
            "count": 1
        }).execute()

    # –£–¥–∞–ª—è–µ–º –ª–æ—Ç —Å —Ä—ã–Ω–∫–∞
    supabase.table("rynok") \
        .delete() \
        .eq("id", lot_id) \
        .execute()

    await callback_query.message.edit_text(
        f"‚úÖ –õ–æ—Ç <b>{item_name}</b> —É–¥–∞–ª—ë–Ω –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ —Ä—é–∫–∑–∞–∫.",
        parse_mode="HTML"
    )
@dp.callback_query(lambda c: c.data == "buy_diamonds")
async def buy_diamonds_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    result = supabase.table("users").select("*").eq("user_id", user_id).single().execute()
    user = result.data

    if not user:
        await callback_query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    money = user.get("money", 0)

    if money < 5000:
        await callback_query.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–ª–º–∞–∑–æ–≤.")
        return

    diamonds = user.get("diamonds", 0)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    supabase.table("users").update({
        "money": money - 5000,
        "diamonds": diamonds + 100
    }).eq("user_id", user_id).execute()

    await callback_query.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 100 –∞–ª–º–∞–∑–æ–≤ –∑–∞ 5,000 –¥–µ–Ω–µ–≥.")


@dp.callback_query(lambda c: c.data == "buy_premium")
async def buy_premium_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    result = supabase.table("users").select("*").eq("user_id", user_id).single().execute()
    user = result.data

    if not user:
        await callback_query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    diamonds = user.get("diamonds", 0)

    if diamonds < 100:
        await callback_query.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞.")
        return

    now = datetime.now(timezone.utc)
    premium_until_str = user.get("premium_until")
    premium_until = None

    if premium_until_str:
        try:
            premium_until = datetime.fromisoformat(premium_until_str.replace("Z", "+00:00"))
        except Exception:
            premium_until = None

    if premium_until and premium_until > now:
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã premium_until
        new_premium_until = premium_until + timedelta(days=7)
        message_text = "‚úÖ –ö –≤–∞—à–µ–º—É —Å—Ä–æ–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–æ 7 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞!"
    else:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        new_premium_until = now + timedelta(days=7)
        message_text = "üéâ –ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π!"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ ISO —Å 'Z'
    new_premium_until_iso = new_premium_until.isoformat(timespec='seconds').replace('+00:00', 'Z')

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    supabase.table("users").update({
        "diamonds": diamonds - 100,
        "premium": True,
        "premium_until": new_premium_until_iso
    }).eq("user_id", user_id).execute()

    await callback_query.message.edit_text(message_text)



@dp.callback_query(lambda c: c.data.startswith("user_lots_page_"))
async def paginate_user_lots(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[-1])
    await show_user_lots(callback_query, page)


@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def handle_buy(callback_query: types.CallbackQuery):
    buyer_id = callback_query.from_user.id
    lot_id = int(callback_query.data.split("_")[1])

    # 1. –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏–∑ —Ä—ã–Ω–∫–∞
    result = supabase.table("rynok") \
        .select("*") \
        .eq("id", lot_id) \
        .limit(1) \
        .execute()

    if not result.data:
        await callback_query.answer("‚ùó –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    lot = result.data[0]
    item_name = lot["item_name"]
    cost = lot["cost"]
    seller_id = lot["user_id"]

    if seller_id == buyer_id:
        await callback_query.answer("‚ùó –ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–π –ª–æ—Ç.", show_alert=True)
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    buyer_data = supabase.table("users") \
        .select("money") \
        .eq("user_id", buyer_id) \
        .limit(1) \
        .execute()

    if not buyer_data.data:
        await callback_query.answer("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    buyer_money = buyer_data.data[0]["money"]

    if buyer_money < cost:
        await callback_query.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.", show_alert=True)
        return

    # 3. –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    supabase.table("users") \
        .update({"money": buyer_money - cost}) \
        .eq("user_id", buyer_id) \
        .execute()

    # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ backpack
    backpack_check = supabase.table("backpack") \
        .select("count") \
        .eq("user_id", buyer_id) \
        .eq("item_name", item_name) \
        .limit(1) \
        .execute()

    if backpack_check.data:
        current_count = backpack_check.data[0]["count"]
        supabase.table("backpack") \
            .update({"count": current_count + 1}) \
            .eq("user_id", buyer_id) \
            .eq("item_name", item_name) \
            .execute()
    else:
        supabase.table("backpack").insert({
            "user_id": buyer_id,
            "item_name": item_name,
            "count": 1
        }).execute()

    # 5. –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É
    seller_data = supabase.table("users") \
        .select("money") \
        .eq("user_id", seller_id) \
        .limit(1) \
        .execute()

    if seller_data.data:
        seller_money = seller_data.data[0]["money"]
        supabase.table("users") \
            .update({"money": seller_money + cost}) \
            .eq("user_id", seller_id) \
            .execute()

    # 6. –£–¥–∞–ª—è–µ–º –ª–æ—Ç —Å —Ä—ã–Ω–∫–∞
    supabase.table("rynok") \
        .delete() \
        .eq("id", lot_id) \
        .execute()

    # 7. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    await callback_query.message.edit_text(
        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ <b>{item_name}</b> –∑–∞ <b>{cost}</b> –º–æ–Ω–µ—Ç.",
        parse_mode="HTML"
    )

    # 8. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    try:
        await bot.send_message(
            seller_id,
            f"üí∞ –í–∞—à –ª–æ—Ç <b>{item_name}</b> –±—ã–ª –∫—É–ø–ª–µ–Ω –∑–∞ <b>{cost}</b> –º–æ–Ω–µ—Ç!",
            parse_mode="HTML"
        )
    except:
        pass

@dp.callback_query(lambda c: c.data.startswith("market_page_"))
async def handle_market_pagination(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[-1])
    await callback_query.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_market(callback_query.message, page=page)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("page:"))
async def handle_pagination(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    page = int(callback_query.data.split(":")[1])

    keyboard = await create_paginated_inline_keyboard(user_id, items, supabase, page=page)

    if keyboard:
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

@dp.callback_query(F.data.startswith("slot_"))
async def handle_slot(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    slot = callback.data.replace("slot_", "")  # "head", "body", ...

    items = get_user_backpack(user_id, supabase)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã backpack
    user_items = {item["item_name"]: item["count"] for item in items}

    slot_items = get_items_by_slot(slot)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–ª–æ—Ç–∞

    slot_title = {
        "head": "ü™ñ –ì–æ–ª–æ–≤–∞",
        "body": "üëï –¢–µ–ª–æ",
        "gloves": "üß§ –†—É–∫–∏",
        "legs": "üëñ –ù–æ–≥–∏",
        "feet": "ü•æ –°—Ç—É–ø–Ω–∏",
        "weapon": "üó° –û—Ä—É–∂–∏–µ"
    }.get(slot, "–°–ª–æ—Ç")

    message_lines = [f"<b>{slot_title} ‚Äî –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:</b>\n"]

    found = False

    for item in slot_items:
        name = item["name"]
        if name in user_items:
            count = user_items[name]
            hp = item.get("hp", 0)
            dmg = item.get("damage", 0)
            found = True
            message_lines.append(
                f"üîπ <b>{name}</b>\n"
                f"    ü©∏ HP: <code>{hp}</code>\n"
                f"    ‚öîÔ∏è –£—Ä–æ–Ω: <code>{dmg}</code>\n"
                f"    üéí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{count}</code>\n"
            )

    if not found:
        message_lines.append("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ.")

    await callback.message.edit_text(
        "\n".join(message_lines),
        parse_mode="HTML",
        reply_markup=backpack_keyboard
    )

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã materials
@dp.callback_query(F.data == "view_resources")
async def handle_resources(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    response = supabase.table("materials").select("*").eq("user_id", user_id).execute()
    materials = response.data

    if not materials:
        await callback.message.edit_text("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.", reply_markup=backpack_keyboard)
        return

    message_lines = ["<b>üì¶ –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"]
    for material in materials:
        name = material["material_name"]
        count = material["count"]
        message_lines.append(f"üîπ <b>{name}</b> ‚Äî <code>{count}</code> —à—Ç.")

    await callback.message.edit_text(
        "\n".join(message_lines),
        parse_mode="HTML",
        reply_markup=backpack_keyboard
    )


@dp.callback_query(lambda c: c.data.startswith("create_lot:"))
async def process_create_lot_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    item_name = callback_query.data.split(":")[1]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
    waiting_for_price.add(user_id)
    lot_creation_data[user_id] = item_name

    await callback_query.message.answer(f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: <b>{item_name}</b>\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "pvp_cancel")
async def leave_pvp(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
    status_res = supabase.table("adventure_status") \
        .select("*") \
        .eq("user_id", user_id) \
        .eq("pvp", True) \
        .execute()

    if not status_res.data:
        await callback.answer("‚ùó –í—ã —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞ –∞—Ä–µ–Ω–µ.", show_alert=True)
        return

    status = status_res.data[0]
    opponent_id = status.get("opponent_id")

    if not opponent_id:
        # –ò–≥—Ä–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏, –±–æ—ë–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        supabase.table("adventure_status").delete().eq("user_id", user_id).execute()
        await callback.message.edit_text("‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞—Ä–µ–Ω—É. –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    # –ò–≥—Ä–æ–∫ –≤ –±–æ—é ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º —à—Ç—Ä–∞—Ñ/–ø—Ä–µ–º–∏—é
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        user_record = supabase.table("users").select("money").eq("user_id", user_id).execute().data[0]
        opp_record = supabase.table("users").select("pvp_win, money").eq("user_id", opponent_id).execute().data[0]

        user_money = user_record.get("money") or 0
        opp_money = opp_record.get("money") or 0
        opp_wins = opp_record.get("pvp_win") or 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–±–µ–¥—ã
        new_user_money = max(0, user_money - 100)
        new_opp_money = opp_money + 100
        new_opp_wins = opp_wins + 1

        supabase.table("users").update({
            "money": new_user_money
        }).eq("user_id", user_id).execute()

        supabase.table("users").update({
            "money": new_opp_money,
            "pvp_win": new_opp_wins
        }).eq("user_id", opponent_id).execute()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(user_id, "‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞—Ä–µ–Ω—É. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 100üí∞.")
        await bot.send_message(opponent_id, "üèÜ –í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ –±–æ—è. –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ 100üí∞!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    supabase.table("adventure_status").delete().or_(
        f"user_id.eq.{user_id},user_id.eq.{opponent_id}"
    ).execute()


@dp.callback_query(lambda c: c.data in ["pvp_attack", "pvp_skip"])
async def pvp_action(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    action = callback.data  # "pvp_attack" –∏–ª–∏ "pvp_skip"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–µ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    user_status_res = supabase.table("adventure_status").select("*").eq("user_id", user_id).execute()
    if not user_status_res.data:
        await callback.answer("‚ùó –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ PvP.", show_alert=True)
        return

    user_status = user_status_res.data[0]
    opponent_id = user_status.get("opponent_id")
    if not opponent_id:
        await callback.answer("‚ùó –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    opp_status_res = supabase.table("adventure_status").select("*").eq("user_id", opponent_id).execute()
    if not opp_status_res.data:
        await callback.answer("‚ùó –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    opponent_status = opp_status_res.data[0]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞
    if user_status["pvp_turn"] > opponent_status["pvp_turn"]:
        await callback.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.", show_alert=True)
        return

    logs = []

    if action == "pvp_attack":
        attacker_name_res = supabase.table("users").select("username").eq("user_id", user_id).execute()
        defender_name_res = supabase.table("users").select("username").eq("user_id", opponent_id).execute()
        attacker_name = attacker_name_res.data[0]["username"]
        defender_name = defender_name_res.data[0]["username"]

        # –£–∫–ª–æ–Ω–µ–Ω–∏–µ (dodge) –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        dodge_chance = opponent_status.get("dodge", 0)
        dodge_roll = random.uniform(0, 100)

        # ... –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ if action == "pvp_attack":

        if dodge_roll < dodge_chance:
            # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∫–ª–æ–Ω–∏–ª—Å—è
            logs.append(f"üåÄ {defender_name} —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏ {attacker_name}! –£—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–µ—Å—ë–Ω.")
            damage = 0
        else:
            crit_chance = user_status.get("crit", 0)
            crit_roll = random.uniform(0, 100)
            base_damage = user_status["attack"]
            crit_multiplier = 1.2

            if crit_roll < crit_chance:
                damage = int(base_damage * crit_multiplier)
                logs.append(f"üî• {attacker_name} –Ω–∞–Ω–æ—Å–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! –£—Ä–æ–Ω: {damage}")
            else:
                damage = base_damage
                logs.append(f"üó°Ô∏è {attacker_name} –Ω–∞–Ω–æ—Å–∏—Ç –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä. –£—Ä–æ–Ω: {damage}")

        opp_hp_before = opponent_status["health"]
        new_opp_hp = max(0, opp_hp_before - damage)

        # –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ ‚Äî –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Ä–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–Ω–µ—Å –∞—Ç–∞–∫—É—é—â–∏–π
        counter_attack = opponent_status.get("counter_attack", 0)

        if counter_attack > 0 and new_opp_hp > 0 and damage > 0:
            counter_damage = damage // 2
            attacker_hp_before = user_status["health"]
            new_attacker_hp = max(0, attacker_hp_before - counter_damage)
            supabase.table("adventure_status").update({
                "health": new_attacker_hp
            }).eq("user_id", user_id).execute()
            logs.append(f"üõ°Ô∏è {defender_name} –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {counter_damage} —É—Ä–æ–Ω–∞ {attacker_name}.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        supabase.table("adventure_status").update({
            "health": new_opp_hp
        }).eq("user_id", opponent_id).execute()


    else:
        logs.append("‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Ö–æ–¥.")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    supabase.table("adventure_status").update({
        "pvp_turn": user_status["pvp_turn"] + 1,
        "last_action": "\n".join(logs)
    }).eq("user_id", user_id).execute()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–∞ –ª–∏ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥?
    updated_user_status = supabase.table("adventure_status").select("*").eq("user_id", user_id).execute().data[0]
    updated_opp_status = supabase.table("adventure_status").select("*").eq("user_id", opponent_id).execute().data[0]

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞
    user_info = supabase.table("users").select("username").eq("user_id", user_id).execute().data[0]
    opponent_info = supabase.table("users").select("username").eq("user_id", opponent_id).execute().data[0]

    name1 = user_info["username"]
    name2 = opponent_info["username"]

    if updated_user_status["pvp_turn"] == updated_opp_status["pvp_turn"]:
        report = (
            f"üì¢ –•–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω:\n\n"
            f"{name1}:\n{updated_user_status['last_action']}\n\n"
            f"{name2}:\n{updated_opp_status['last_action']}\n\n"
            f"‚ù§Ô∏è {name1}: {updated_user_status['health']} HP\n"
            f"‚ù§Ô∏è {name2}: {updated_opp_status['health']} HP"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—è
        result_msg = None
        if updated_user_status["health"] <= 0 and updated_opp_status["health"] <= 0:
            result_msg = "ü§ù –ù–∏—á—å—è! –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–∞–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
        elif updated_user_status["health"] <= 0:
            result_msg = f"üèÜ {name2} –ø–æ–±–µ–∂–¥–∞–µ—Ç!\nüíÄ {name1} –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç."
        elif updated_opp_status["health"] <= 0:
            result_msg = f"üèÜ {name1} –ø–æ–±–µ–∂–¥–∞–µ—Ç!\nüíÄ {name2} –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç."

        reply_markup = get_pvp_keyboard() if not result_msg else None
        await bot.send_message(user_id, report, reply_markup=reply_markup)
        await bot.send_message(opponent_id, report, reply_markup=reply_markup)

        if result_msg:
            if updated_user_status["health"] <= 0 and updated_opp_status["health"] <= 0:
                # –ù–∏—á—å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
                await bot.send_message(user_id, result_msg)
                await bot.send_message(opponent_id, result_msg)
            elif updated_user_status["health"] <= 0:
                # –ü–æ–±–µ–¥–∏–ª opponent
                winner_record = \
                supabase.table("users").select("pvp_win, money").eq("user_id", opponent_id).execute().data[0]
                winner_wins = winner_record.get("pvp_win") or 0
                winner_money = winner_record.get("money") or 0

                loser_record = supabase.table("users").select("money").eq("user_id", user_id).execute().data[0]
                loser_money = loser_record.get("money") or 0

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                supabase.table("users").update({
                    "pvp_win": winner_wins + 1,
                    "money": winner_money + 100
                }).eq("user_id", opponent_id).execute()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É (–º–∏–Ω—É—Å 100, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0)
                new_loser_money = max(0, loser_money - 100)
                supabase.table("users").update({
                    "money": new_loser_money
                }).eq("user_id", user_id).execute()

                await bot.send_message(opponent_id, f"üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100üí∞!")
                await bot.send_message(user_id, f"üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 100üí∞!")

                await bot.send_message(user_id, result_msg)
                await bot.send_message(opponent_id, result_msg)

            elif updated_opp_status["health"] <= 0:
                # –ü–æ–±–µ–¥–∏–ª user
                winner_record = supabase.table("users").select("pvp_win, money").eq("user_id", user_id).execute().data[
                    0]
                winner_wins = winner_record.get("pvp_win") or 0
                winner_money = winner_record.get("money") or 0

                loser_record = supabase.table("users").select("money").eq("user_id", opponent_id).execute().data[0]
                loser_money = loser_record.get("money") or 0

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                supabase.table("users").update({
                    "pvp_win": winner_wins + 1,
                    "money": winner_money + 100
                }).eq("user_id", user_id).execute()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É (–º–∏–Ω—É—Å 100, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0)
                new_loser_money = max(0, loser_money - 100)
                supabase.table("users").update({
                    "money": new_loser_money
                }).eq("user_id", opponent_id).execute()

                await bot.send_message(user_id, f"üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100üí∞!")
                await bot.send_message(opponent_id, f"üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 100üí∞!")

                await bot.send_message(user_id, result_msg)
                await bot.send_message(opponent_id, result_msg)

            # –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            supabase.table("adventure_status").delete().or_(
                f"user_id.eq.{user_id},user_id.eq.{opponent_id}"
            ).execute()

    else:
        await callback.answer("‚úÖ –•–æ–¥ –ø—Ä–∏–Ω—è—Ç.")

@dp.callback_query(lambda call: call.data == "back_to_forge")
async def handle_back_to_forge(call: types.CallbackQuery):
    crafter_sets = SETS.get("crafter", {})

    if not crafter_sets:
        await call.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞.")
        return

    keyboard = [
        [InlineKeyboardButton(text=set_name, callback_data=f"craft_set:{set_name}")]
        for set_name in crafter_sets.keys()
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await call.message.edit_text("üõ† –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query(lambda call: call.data.startswith("craft_item:"))
async def handle_craft_item(call: types.CallbackQuery):
    item_id = int(call.data.split(":")[1])
    user_id = call.from_user.id

    found_item = None
    set_name = None

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID –≤ crafter-—Å–µ—Ç–∞—Ö
    for s_name, s_data in SETS.get("crafter", {}).items():
        for item in s_data.get("items", []):
            if item["id"] == item_id:
                found_item = item
                set_name = s_name
                break
        if found_item:
            break

    if not found_item:
        await call.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    item_name = found_item["name"]

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    craft_data = craft_sets.get(set_name, {})
    needed_materials = craft_data.get(item_name, {})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    for material_name, required_count in needed_materials.items():
        materials_resp = supabase.table("materials")\
            .select("count")\
            .eq("user_id", user_id)\
            .eq("material_name", material_name)\
            .execute()

        if not materials_resp.data or materials_resp.data[0]["count"] < required_count:
            await call.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_name}", show_alert=True)
            return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    for material_name, required_count in needed_materials.items():
        materials_resp = supabase.table("materials")\
            .select("count")\
            .eq("user_id", user_id)\
            .eq("material_name", material_name)\
            .execute()

        current_count = materials_resp.data[0]["count"]
        supabase.table("materials")\
            .update({"count": current_count - required_count})\
            .eq("user_id", user_id)\
            .eq("material_name", material_name)\
            .execute()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—é–∫–∑–∞–∫–µ
    existing = supabase.table("backpack")\
        .select("count")\
        .eq("user_id", user_id)\
        .eq("item_name", item_name)\
        .execute()

    if existing.data:
        current_count = existing.data[0]["count"]
        supabase.table("backpack")\
            .update({"count": current_count + 1})\
            .eq("user_id", user_id)\
            .eq("item_name", item_name)\
            .execute()
    else:
        supabase.table("backpack")\
            .insert({"user_id": user_id, "item_name": item_name, "count": 1})\
            .execute()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await call.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
    await call.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç:\n<b>{item_name}</b>\n\n"
        f"üß± –ò–∑ —Å–µ—Ç–∞: <b>{set_name}</b>",
        parse_mode="HTML"
    )
@dp.callback_query(lambda call: call.data.startswith("item_info:"))
async def handle_item_info(call: types.CallbackQuery):
    item_id = int(call.data.split(":")[1])
    found_item = None
    set_name = None

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID –≤ crafter-—Å–µ—Ç–∞—Ö
    for s_name, s_data in SETS.get("crafter", {}).items():
        for item in s_data.get("items", []):
            if item["id"] == item_id:
                found_item = item
                set_name = s_name
                break
        if found_item:
            break

    if not found_item:
        await call.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    item_name = found_item["name"]
    hp = found_item.get("hp", 0)
    dmg = found_item.get("damage", 0)

    # –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ (–∫–ª—é—á, –∫—Ä–æ–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö)
    part = next((k for k in found_item if k not in ["id", "name", "hp", "damage"]), "???")

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ craft_sets
    craft_data = craft_sets.get(set_name, {})
    materials = craft_data.get(item_name, {})

    materials_text = "\n".join([f"- {mat}: {amt}" for mat, amt in materials.items()]) if materials else "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å", callback_data=f"craft_item:{item_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"craft_set:{set_name}")]
    ])

    await call.message.edit_text(
        f"üß± –°–µ—Ç: *{set_name}*\n"
        f"üì¶ –ü—Ä–µ–¥–º–µ—Ç: *{item_name}*\n\n"
        f"‚ù§Ô∏è HP: {hp}\n‚öîÔ∏è –£—Ä–æ–Ω: {dmg}\n"
        f"üîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{materials_text}",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data and c.data.startswith("loc_"))
async def clan_battle_callback(callback: types.CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id
    location_name = data[4:]

    if location_name not in allowed_locations:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clan_resp = supabase.table("clan_members").select("clan_name").eq("user_id", user_id).execute()
    if not clan_resp.data:
        await callback.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.", show_alert=True)
        return
    clan = clan_resp.data[0]['clan_name']

    # –ü–æ–ª—É—á–∞–µ–º health –∏ attack –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users
    user_resp = supabase.table("users").select("health", "attack").eq("user_id", user_id).execute()
    if not user_resp.data:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return
    health = user_resp.data[0]['health']
    attack = user_resp.data[0]['attack']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ clan_battle
    record_resp = supabase.table("clan_battle").select("pin").eq("user_id", user_id).execute()

    if not record_resp.data:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å health –∏ attack
        supabase.table("clan_battle").insert({
            "user_id": user_id,
            "clan_name": clan,
            "pin": location_name,
            "health": health,
            "attack": attack
        }).execute()

        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: {location_name}", show_alert=True)
    else:
        current_pin = record_resp.data[0]['pin']
        if current_pin == location_name:
            await callback.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é!", show_alert=True)
        else:
            supabase.table("clan_battle").update({
                "pin": location_name,
                "health": health,
                "attack": attack
            }).eq("user_id", user_id).execute()

            await callback.answer(f"–õ–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {location_name}", show_alert=True)




@dp.callback_query(lambda call: call.data.startswith("craft_set:"))
async def handle_craft_set_selection(call: types.CallbackQuery):
    set_name = call.data.split(":", 1)[1]
    crafter_sets = SETS.get("crafter", {})
    selected_set = crafter_sets.get(set_name)

    if not selected_set:
        await call.message.edit_text("‚ùå –°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    description = selected_set.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    items = selected_set.get("items", [])

    # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º + —Å—Ç–∞—Ç—ã (‚ù§Ô∏è HP, ‚öîÔ∏è —É—Ä–æ–Ω)
    item_buttons = []
    for item in items:
        name = item["name"]
        hp = item.get("hp", 0)
        dmg = item.get("damage", 0)
        stats_str = f"‚ù§Ô∏è {hp} ‚öîÔ∏è {dmg}"
        item_buttons.append([
            InlineKeyboardButton(
                text=f"{name}  {stats_str}",
                callback_data=f"item_info:{item['id']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    item_buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_forge")
    ])

    markup = InlineKeyboardMarkup(inline_keyboard=item_buttons)

    # üëá –°—á–∏—Ç–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–∑ craft_sets
    materials_summary = {}

    craft_info = craft_sets.get(set_name, {})  # set_name –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä "–û—Å–µ–Ω–Ω–∏–π –õ–∏—Å—Ç üçÅ")
    for item_materials in craft_info.values():
        for material, amount in item_materials.items():
            materials_summary[material] = materials_summary.get(material, 0) + amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Ç–æ–≥–æ–≤—ã–π
    materials_text = "\n".join([f"- {mat}: {amt}" for mat, amt in materials_summary.items()])

    # –û—Ç–≤–µ—Ç
    await call.message.edit_text(
        f"üß± –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç: *{set_name}*\n\n"
        f"{description}\n\n"
        f"*–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—Å–µ–≥–æ —Å–µ—Ç–∞:*\n{materials_text}",
        parse_mode="Markdown",
        reply_markup=markup
    )


@dp.callback_query(lambda c: c.data.startswith("equip_"))
async def handle_item_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    selected_item_callback = callback_query.data

    selected_item = None
    item_category = None

    # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ full_items
    for category_name, category_data in full_items.items():
        for item in category_data:
            if item['callback_data'] == selected_item_callback:
                selected_item = item
                item_category = category_name
                break
        if selected_item:
            break

    if not selected_item:
        await callback_query.answer("‚ùó –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = supabase.table("users").select("*").eq("user_id", user_id).single().execute()
    if not user_data.data:
        await callback_query.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞–¥–µ—Ç–æ –ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
    current_equipped = user_data.data.get(item_category)
    if current_equipped and current_equipped != "–Ω–µ—Ç":
        await callback_query.answer(f"‚õî –£–∂–µ –Ω–∞–¥–µ—Ç–æ: {current_equipped}", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—é–∫–∑–∞–∫–µ
    item_name = selected_item["name"]
    backpack_entry = supabase.table("backpack").select("count")\
        .eq("user_id", user_id).eq("item_name", item_name).single().execute()

    if not backpack_entry.data or backpack_entry.data["count"] < 1:
        await callback_query.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
        return

    new_count = backpack_entry.data["count"] - 1

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ä—é–∫–∑–∞–∫–∞
    if new_count == 0:
        supabase.table("backpack").delete().eq("user_id", user_id).eq("item_name", item_name).execute()
    else:
        supabase.table("backpack").update({"count": new_count})\
            .eq("user_id", user_id).eq("item_name", item_name).execute()

    # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    hp_bonus, damage_bonus = get_item_stats(item_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    supabase.table("users").update({
        item_category: item_name,
        "health": user_data.data.get("health", 0) + hp_bonus,
        "attack": user_data.data.get("attack", 0) + damage_bonus
    }).eq("user_id", user_id).execute()

    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer(f"‚úÖ –ù–∞–¥–µ—Ç–æ: <b>{item_name}</b>")

@dp.callback_query()
async def handle_clan_callbacks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    try:
        user_id = callback.from_user.id
        data = callback.data

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º–∞
        user_result = supabase.table("users").select("premium_until, premium").eq("user_id", user_id).single().execute()
        user = user_result.data

        if user:
            premium_until_str = user.get("premium_until")
            if premium_until_str:
                premium_until = datetime.fromisoformat(premium_until_str.replace("Z", "+00:00"))
                now = datetime.now(timezone.utc)  # –ó–æ–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å UTC
                if premium_until < now:
                    # –ü—Ä–µ–º—ñ—É–º –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
                    supabase.table("users").update({
                        "premium": False,
                        "premium_until": None
                    }).eq("user_id", user_id).execute()

                    await callback.answer("‚õî –í–∞—à –ø—Ä–µ–º–∏—É–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.", show_alert=True)
                    return
        if data.startswith("clan_"):
            await callback.answer()
            clan_key = data[5:]
            clan_name = next((name for name in CLANS if name.startswith(clan_key)), None)
            if not clan_name:
                await callback.answer("‚ùó –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            desc = CLANS[clan_name]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{clan_key}"),
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_clans")
                ]
            ])
            await callback.message.edit_text(desc, reply_markup=keyboard)

        elif data.startswith("select_"):
            await callback.answer()
            clan_key = data[7:]
            clan_name = next((name for name in CLANS if name.startswith(clan_key)), None)
            if not clan_name:
                await callback.answer("‚ùó –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            supabase.table("users").update({"clan": clan_name}).eq("user_id", user_id).execute()
            supabase.table("clan_members").upsert({"clan_name": clan_name, "user_id": user_id}).execute()

            await callback.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω:\n\n{CLANS[clan_name]}")
            await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_menu_kb)

        elif data == "back_to_clans":
            await callback.answer()
            await ask_clan_choice(callback.message)

        elif data.startswith("adventure_"):
            await callback.answer()
            location_name = data[len("adventure_"):]
            adventure = ADVENTURES.get(location_name)
            if not adventure:
                await callback.answer("‚ùó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            mob_preview = random.choice(adventure["mobs"])
            location_info = LOCATIONS[location_name]
            exp_range = f"{location_info['exp'][0]}‚Äì{location_info['exp'][1]}"
            money_range = f"{location_info['money'][0]}‚Äì{location_info['money'][1]}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_adv_{location_name}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
            ])

            await callback.message.edit_text(
                f"üìç <b>{location_name}</b>\n"
                f"{adventure['description']}\n\n"
                f"üëæ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–∞–≥–∏: <i>{', '.join(adventure['mobs'])}</i>\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b>\n"
                f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b>",
                reply_markup=keyboard
            )

        elif data.startswith("preview_"):
            await callback.answer()
            location_name = data[len("preview_"):]
            adventure = ADVENTURES.get(location_name)
            location = LOCATIONS.get(location_name)

            if not adventure or not location:
                await callback.answer("‚ùó –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            exp_range = f"{location['exp'][0]}‚Äì{location['exp'][1]}"
            money_range = f"{location['money'][0]}‚Äì{location['money'][1]}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_adv_{location_name}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
            ])

            await callback.message.edit_text(
                f"üìç <b>{location_name}</b>\n"
                f"{adventure['description']}\n\n"
                f"üëæ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–∞–≥–∏: <i>{', '.join(adventure['mobs'])}</i>\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b>\n"
                f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b>",
                reply_markup=keyboard
            )
        elif data.startswith("start_adv_"):
            location_name = data[len("start_adv_"):]
            location = LOCATIONS.get(location_name)
            if not location:
                await callback.answer("‚ùó –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            user_data = supabase.table("users").select("level").eq("user_id", user_id).execute()
            user_level = user_data.data[0]["level"] if user_data.data else 1
            required_level = location.get("min_level", 1)
            if user_level < required_level:
                await callback.answer(f"üîí –î–æ—Å—Ç—É–ø–Ω–æ —Å {required_level} —É—Ä–æ–≤–Ω—è.", show_alert=True)
                return

            now = datetime.utcnow()
            existing_status = supabase.table("adventure_status").select("*").eq("user_id", user_id).execute()
            if existing_status.data:
                end_time_str = existing_status.data[0]["end_time"]
                end_time = datetime.fromisoformat(end_time_str)
                if end_time > now:
                    remaining = (end_time - now).seconds
                    await callback.answer(f"‚è≥ –¢—ã —É–∂–µ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫.", show_alert=True)
                    return
                else:
                    supabase.table("adventure_status").delete().eq("user_id", user_id).execute()

            await callback.answer()  # üëà –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û sleep –∏–ª–∏ create_task

            duration = location["duration"]
            end_time = now + timedelta(seconds=duration)
            supabase.table("adventure_status").upsert({
                "user_id": user_id,
                "location": location_name,
                "end_time": end_time.isoformat()
            }).execute()

            adventure = ADVENTURES.get(location_name)
            monster = get_random_monster(location_name, adventure["mobs"])

            try:
                await callback.message.delete()
            except Exception:
                pass

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            await bot.send_message(
                user_id,
                f"üèÉ‚Äç‚ôÇÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ <b>{location_name}</b>\n\n"
                f"üëæ <b>–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞: {monster['name']}</b>\n"
                f"üìñ <i>{monster['description']}</i>\n"
                f"üè∑ –†–µ–¥–∫–æ—Å—Ç—å: <b>{monster['rarity'].capitalize()}</b>\n\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{monster['hp']}</b>\n"
                f"üí• –£—Ä–æ–Ω: <b>{monster['damage']}</b>\n"
                f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: <b>{monster['dodge']}%</b>\n"
                f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>{monster['counter']}%</b>\n\n"
                f"‚è≥ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è <b>{duration}</b> —Å–µ–∫."
            )

            # ‚úÖ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–∞
            asyncio.create_task(handle_adventure(user_id, location_name, monster, duration))

        elif data == "back_to_adventures":
            await callback.answer()
            buttons = [
                [InlineKeyboardButton(text=f"{name} {emoji}", callback_data=f"adventure_{name}")]
                for name, emoji in zip(ADVENTURES.keys(), ["üå≤", "üèöÔ∏è", "üè∞"])
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.edit_text("üåç <b>–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:</b>", reply_markup=keyboard)

        else:
            await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

    except Exception as e:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        print(f"Callback error: {e}")


# ---------- Run bot ----------
async def main():
    await notify_users_on_start()
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
