import os
import asyncio
import re
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv

# ---------- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø .env ----------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN, SUPABASE_URL —Ç–∞ SUPABASE_ANON_KEY –≤ .env")

# ---------- –ë–æ—Ç ----------
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase ----------
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

waiting_for_nick = set()

# ---------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ----------
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"),
         KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

top_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"), KeyboardButton(text="üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)

forge_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞"), KeyboardButton(text="üî® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)

# ---------- –ö–ª–∞–Ω–∏ —Ç–∞ —ó—Ö –æ–ø–∏—Å–∏ ----------
CLANS = {
    "–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏ üåå": (
        "üõ° <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî –≤–æ–∏–Ω—ã —Å–≤–µ—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—Å–º–æ—Å–æ–º –∏ –≤–µ—á–Ω–æ—Å—Ç—å—é. "
        "–û–Ω–∏ –æ—Ö—Ä–∞–Ω—è—é—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ –∏ –∑–∞—â–∏—â–∞—é—Ç –º–∏—Ä –æ—Ç —Ö–∞–æ—Å–∞."
    ),
    "–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏ üî•": (
        "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî –ª–∏–¥–µ—Ä—ã –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏. –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—Ç –Ω–∞–¥–µ–∂–¥—É, —á–∏—Å—Ç–æ—Ç—É –∏ —Å–∏–ª—É –¥—É—Ö–∞. "
        "–ò—Ö —Ü–µ–ª—å ‚Äî –±—ã—Ç—å —Å–≤–µ—Ç–æ–º –≤–æ —Ç—å–º–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö."
    ),
    "–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏ üåë": (
        "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî –º–∞—Å—Ç–µ—Ä–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö —É–¥–∞—Ä–æ–≤. "
        "–û–Ω–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –∏–∑ —Ç–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≤–∫–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ."
    ),
    "–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏ üéµ": (
        "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî –º—É–¥—Ä–µ—Ü—ã –∏ –º–∏—Å—Ç–∏–∫–∏, –≤–ª–∞–¥–µ—é—â–∏–µ –¥—Ä–µ–≤–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –º–∞–≥–∏–µ–π. "
        "–ò—Ö —Å–∏–ª–∞ –∫—Ä–æ–µ—Ç—Å—è –≤ —Ç–∞–π–Ω–µ, —Ç–∏—à–∏–Ω–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–∏."
    )
}

# –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è –±–æ—Ç–∞
async def ping_fly_machine():
    url = "https://bot-amackg.fly.dev"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—é –∞–¥—Ä–µ—Å—É, —è–∫—â–æ —ñ–Ω—à–∞
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=3) as response:
                if response.status == 200:
                    print("üü¢ Fly.io –º–∞—à–∏–Ω–∞ —Ä–æ–∑–±—É–¥–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–Ω–≥–æ–Ω—É—Ç–∏ –º–∞—à–∏–Ω—É: {e}")

# ---------- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≤–∏–±–æ—Ä—É –∫–ª–∞–Ω—É ----------
async def ask_clan_choice(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text=clan, callback_data=f"clan_{clan.split()[0]}")]
        for clan in CLANS.keys()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    description = (
        "üß≠ <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞–Ω–æ–≤:</b>\n\n"
        "üåå <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî –≤–æ–∏–Ω—ã —Å–≤–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ—Ä—è–¥–∫–∞\n"
        "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —Å–∏–º–≤–æ–ª –Ω–∞–¥–µ–∂–¥—ã –∏ —Å–∏–ª—ã –¥—É—Ö–∞\n"
        "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —Å–∫—Ä—ã—Ç–Ω—ã–µ –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ –±–æ–π—Ü—ã\n"
        "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî –º—É–¥—Ä–µ—Ü—ã, –≤–ª–∞–¥–µ—é—â–∏–µ —Ç–∞–π–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"
    )
    await message.answer(description, reply_markup=keyboard)

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    response = supabase.table("users").select("username, clan").eq("user_id", user_id).execute()
    row = response.data[0] if response.data else None

    if row and row.get("username") and row.get("clan"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    elif row and row.get("username") and not row.get("clan"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

# ---------- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ----------
@dp.message()
async def handle_messages(message: types.Message):
    await ping_fly_machine()
    
    user_id = message.from_user.id
    text = message.text.strip()

    # ----- –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∏–∫–∞ -----
    # --- –£ handle_messages: –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω—ñ–∫—É (–Ω—ñ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é) ---
    if user_id in waiting_for_nick:
        nickname = text

        # 1. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        if re.search(r"[;:/.\"<>'\\\\]", nickname):
            await message.answer(
                "‚ùó –ù–∏–∫–Ω–µ–π–º —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
            return

        # 2. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ "script"
        if "script" in nickname.lower():
            await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.")
            return

        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
        if not (3 <= len(nickname) <= 9):
            await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # 4. –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ –ª–∞—Ç–∏–Ω–∏—Ü—è/—Ü–∏—Ñ—Ä–∏/_
        if not re.match(r"^[A-Za-z0-9_]+$", nickname):
            await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
            return

        # –í—Å–µ –æ–∫ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
        supabase.table("users").upsert({"user_id": user_id, "username": nickname}).execute()
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{nickname}</b>! –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
        return

    # ----- –ü–†–û–§–Ü–õ–¨ -----
    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        response = supabase.table("users").select("*").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None

        if row:
            clan_desc = CLANS.get(row.get("clan", ""), "")
            profile_text = (
                f"<b>{row['username']}</b> | <code>{user_id}</code>\n"
                f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {row['status']}\n\n"
                f"üåü –£—Ä–æ–≤–µ–Ω—å: {row['level']}\n"
                f"–û–ø—ã—Ç: {row['exp']} / {row['exp_max']}\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ‚ù§Ô∏è{row['health']} | üõ°{row['defense']} | üó°{row['attack']}\n\n"
                f"ü™ô –ë–∞–ª–∞–Ω—Å:\n"
                f"–î–µ–Ω—å–≥–∏: {row['money']} üí∞\n"
                f"–ê–ª–º–∞–∑—ã: {row['diamonds']} üíé\n\n"
                f"ü•ã –û–¥–µ–∂–¥–∞:\n"
                f"–ì–æ–ª–æ–≤–∞: {row['head']}\n"
                f"–¢–µ–ª–æ: {row['body']}\n"
                f"–ù–æ–≥–∏: {row['legs']}\n"
                f"–°—Ç—É–ø–Ω–∏: {row['feet']}\n\n"
                f"ü™õ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
                f"–û—Ä—É–∂–∏–µ: {row['weapon']}\n\n"
                f"üß∞ –°—É–º–∫–∞:\n"
                f"{row['bag']}\n\n"
                f"üí™ –ö–ª–∞–Ω: {row.get('clan', '–Ω–µ—Ç')}\n"
                f"{clan_desc}"
            )
            await message.answer(profile_text, reply_markup=main_menu_kb)
        else:
            waiting_for_nick.add(user_id)
            await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

    # ----- –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è -----
    elif text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è":
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=main_menu_kb)

    # ----- –ú–æ–π –∫–ª–∞–Ω -----
    # --- –£ handle_messages: –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "üí™ –ú–æ–π –∫–ª–∞–Ω", –∑–±–∏—Ä–∞—î–º–æ –Ω—ñ–∫–∏ ---
    elif text == "üí™ –ú–æ–π –∫–ª–∞–Ω":
        response = supabase.table("users").select("clan").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None
        if row and row.get("clan"):
            clan = row["clan"]
            clan_desc = CLANS.get(clan, "")

            members_resp = supabase.table("clan_members").select("user_id").eq("clan_name", clan).execute()
            members = members_resp.data or []
            user_ids = [m["user_id"] for m in members]
            if user_ids:
                users_resp = supabase.table("users").select("user_id, username").in_("user_id", user_ids).execute()
                users_data = users_resp.data or []
                id_to_username = {u["user_id"]: u["username"] for u in users_data}
                members_list = "\n".join(f"- {id_to_username.get(uid, uid)}" for uid in user_ids)
            else:
                members_list = "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

            await message.answer(
                f"üí™ –ö–ª–∞–Ω: <b>{clan}</b>\n\n{clan_desc}\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_list}", reply_markup=main_menu_kb
            )
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω.", reply_markup=main_menu_kb)
            await ask_clan_choice(message)


    # ----- –¢–û–ü -----
    elif text == "üèÜ –¢–æ–ø":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:", reply_markup=top_menu_kb)

    elif text == "üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é":
        full_response = supabase.table("users").select("user_id, username, level").order("level", desc=True).execute()
        players = full_response.data

        if players:
            top_10 = players[:10]
            players_list = "\n".join(f"{i + 1}. {p['username']} üåü {p['level']}" for i, p in enumerate(top_10))

            current_user_place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
            suffix = f"\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {current_user_place}" if current_user_place else ""
            await message.answer(f"üåü <b>–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n\n{players_list}{suffix}", reply_markup=top_menu_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=top_menu_kb)

    elif text == "üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º":
        full_response = supabase.table("users").select("user_id, username, money").order("money", desc=True).execute()
        players = full_response.data

        if players:
            top_10 = players[:10]
            players_list = "\n".join(f"{i + 1}. {p['username']} üí∞ {p['money']}" for i, p in enumerate(top_10))

            current_user_place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
            suffix = f"\n\nüìç –¢–≤–æ–µ –º–µ—Å—Ç–æ: {current_user_place}" if current_user_place else ""
            await message.answer(f"üí∞ <b>–¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º:</b>\n\n{players_list}{suffix}", reply_markup=top_menu_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=top_menu_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    # ----- –ö–£–ó–ù–Ø -----
    elif text == "‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=forge_menu_kb)

    elif text == "‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞" or text == "üî® –ö—Ä–∞—Ñ—Ç":
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=forge_menu_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    # ----- –¢–æ—Ä–≥–æ–≤–ª—è -----
    elif text == "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è":
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=main_menu_kb)

    else:
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.", reply_markup=main_menu_kb)

# ---------- –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –≤–∏–±–æ—Ä—É –∫–ª–∞–Ω—É ----------
@dp.callback_query()
async def handle_clan_callbacks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data  # —Ñ–æ—Ä–º–∞—Ç: clan_<–ö–ª–∞–Ω>

    if data.startswith("clan_"):
        clan_key = data[5:]  # –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–ª–∞–Ω—É –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É
        # –®—É–∫–∞—î–º–æ –∫–ª–∞–Ω –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞ –∫–ª—é—á–µ–º (–ø–æ –ø–µ—Ä—à–æ–º—É —Å–ª–æ–≤—É)
        clan_name = None
        for name in CLANS.keys():
            if name.startswith(clan_key):
                clan_name = name
                break

        if clan_name is None:
            await callback.message.answer("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        desc = CLANS[clan_name]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{clan_key}"),
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_clans")
            ]
        ])

        await callback.message.edit_text(desc, reply_markup=keyboard)
        await callback.answer()

    elif data.startswith("select_"):
        clan_key = data[7:]
        clan_name = None
        for name in CLANS.keys():
            if name.startswith(clan_key):
                clan_name = name
                break
        if clan_name is None:
            supabase.table("users").update({"clan": clan_name}).eq("user_id", user_id).execute()
            supabase.table("clan_members").upsert({"clan_name": clan_name, "user_id": user_id}).execute()

            await callback.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω:\n\n{CLANS[clan_name]}", reply_markup=None)
            await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_menu_kb)
            await callback.answer()

        # –ó–∞–ø–∏—Å—É—î–º–æ –∫–ª–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—ñ users —ñ clan_members
        supabase.table("users").update({"clan": clan_name}).eq("user_id", user_id).execute()

        supabase.table("clan_members").upsert({
            "clan_name": clan_name,
            "user_id": user_id
        }).execute()

        await callback.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω:\n\n{CLANS[clan_name]}")
        await callback.answer("–ö–ª–∞–Ω –≤—ã–±—Ä–∞–Ω!")

    elif data == "back_to_clans":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞–Ω—É
        buttons = [
            [InlineKeyboardButton(text=clan, callback_data=f"clan_{clan.split()[0]}")]
            for clan in CLANS.keys()
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        description = (
            "üß≠ <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞–Ω–æ–≤:</b>\n\n"
            "üåå <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî –≤–æ–∏–Ω—ã —Å–≤–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ—Ä—è–¥–∫–∞\n"
            "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —Å–∏–º–≤–æ–ª –Ω–∞–¥–µ–∂–¥—ã –∏ —Å–∏–ª—ã –¥—É—Ö–∞\n"
            "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —Å–∫—Ä—ã—Ç–Ω—ã–µ –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ –±–æ–π—Ü—ã\n"
            "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî –º—É–¥—Ä–µ—Ü—ã, –≤–ª–∞–¥–µ—é—â–∏–µ —Ç–∞–π–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"
        )
        await callback.message.edit_text(description, reply_markup=keyboard)
        await callback.answer()

# ---------- –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–°–Ü–ú –ü–†–ò –°–¢–ê–†–¢–Ü ----------
async def notify_users_on_start():
    response = supabase.table("users").select("user_id").execute()
    users = response.data
    for user in users:
        try:
            await bot.send_message(user["user_id"], "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
        except Exception:
            pass

# ---------- –û–°–ù–û–í–ù–ò–ô –ó–ê–ü–£–°–ö ----------
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ok"}

def run_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8080, log_level="info")

# –û—Å–Ω–æ–≤–Ω–∞ async-—Ñ—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

# –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(target=run_fastapi, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    import asyncio
    asyncio.run(main())
