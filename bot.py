import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from supabase import create_client, Client

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —ñ Supabase ===
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN, SUPABASE_URL –∞–±–æ SUPABASE_KEY!")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
waiting_for_nick = set()

# === –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ===
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"),
            KeyboardButton(text="ü™® –ö—Ä–∞—Ñ—Ç")
        ],
        [
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"),
            KeyboardButton(text="üèÜ –¢–æ–ø"),
            KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")
        ]
    ],
    resize_keyboard=True
)

# === Supabase —Ñ—É–Ω–∫—Ü—ñ—ó ===
def add_user(user_id, username):
    supabase.table("users").upsert({
        "user_id": user_id,
        "username": username,
        "status": "–ò–≥—Ä–æ–∫",
        "level": 1,
        "exp": 0,
        "exp_max": 100,
        "health": 100,
        "defense": 10,
        "attack": 50,
        "money": 0,
        "diamonds": 0,
        "head": "–Ω–µ—Ç",
        "body": "–Ω–µ—Ç",
        "legs": "–Ω–µ—Ç",
        "feet": "–Ω–µ—Ç",
        "weapon": "–Ω–µ—Ç",
        "bag": "–Ω–µ—Ç",
        "premium_until": None
    }).execute()

def get_user(user_id):
    response = supabase.table("users").select("*").eq("user_id", user_id).execute()
    return response.data[0] if response.data else None

def get_all_users():
    response = supabase.table("users").select("user_id, username").execute()
    return response.data

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = await asyncio.to_thread(get_user, message.from_user.id)
    if user and user.get("username"):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, <b>{user['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=main_menu_kb
        )
    else:
        waiting_for_nick.add(message.from_user.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in waiting_for_nick:
        if len(text) < 3:
            await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        await asyncio.to_thread(add_user, user_id, text)
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º <b>{text}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=main_menu_kb)
        return

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user = await asyncio.to_thread(get_user, user_id)
        if user:
            await message.answer(
                f"<b>{user['username']}</b> | <code>{user['user_id']}</code>\n"
                f"–°—Ç–∞—Ç—É—Å: {user['status']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {user['level']} | –û–ø—ã—Ç: {user['exp']} / {user['exp_max']}\n"
                f"‚ù§Ô∏è {user['health']} üõ° {user['defense']} üó° {user['attack']}\n"
                f"ü™ô {user['money']} üíé {user['diamonds']}\n"
                f"ü•ã –û–¥–µ–∂–¥–∞: –ì–æ–ª–æ–≤–∞: {user['head']}, –¢–µ–ª–æ: {user['body']}, –ù–æ–≥–∏: {user['legs']}, –°—Ç—É–ø–Ω–∏: {user['feet']}\n"
                f"ü™õ –û—Ä—É–∂–∏–µ: {user['weapon']} | üß∞ –°—É–º–∫–∞: {user['bag']}\n"
                f"‚≠ê Premium –¥–æ: {user['premium_until'] or '–ù–µ—Ç'}",
                reply_markup=main_menu_kb
            )
        else:
            waiting_for_nick.add(user_id)
            await message.answer("‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

    elif text == "üèÜ –¢–æ–ø":
        users = await asyncio.to_thread(get_all_users)
        if users:
            leaderboard = "\n".join(f"{i+1}. {user['username']}" for i, user in enumerate(users))
            await message.answer(f"üèÜ <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n{leaderboard}", reply_markup=main_menu_kb)
        else:
            await message.answer("‚ùó –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=main_menu_kb)

    elif text in ["üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "ü™® –ö—Ä–∞—Ñ—Ç", "üí™ –ú–æ–π –∫–ª–∞–Ω", "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è"]:
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{text}</b>", reply_markup=main_menu_kb)

    else:
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.", reply_markup=main_menu_kb)

# === –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É ===
async def notify_users_on_start():
    users = await asyncio.to_thread(get_all_users)
    for user in users:
        try:
            await bot.send_message(user["user_id"], "ü§ñ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
        except Exception:
            pass

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
