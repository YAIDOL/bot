import os
import asyncio
import re
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv



# ---------- Load environment ----------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN, SUPABASE_URL —Ç–∞ SUPABASE_ANON_KEY –≤ .env")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

waiting_for_nick = set()

# ---------- Keyboards ----------
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"), KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

top_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"), KeyboardButton(text="üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)

forge_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞"), KeyboardButton(text="üî® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)
async def notify_users_on_start():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –∞–±–æ —ñ–Ω—à—ñ –¥—ñ—ó


# ----------EXP ----------
async def add_experience(user_id: int, amount: int):
    response = supabase.table("users").select("exp, level, level_points").eq("user_id", user_id).execute()
    if not response.data:
        return

    user = response.data[0]
    current_exp = user.get("exp", 0)
    level = user.get("level", 1)
    level_points = user.get("level_points", 0)

    new_exp = current_exp + amount
    exp_max = level * 100
    level_ups = 0

    while new_exp >= exp_max:
        new_exp -= exp_max
        level += 1
        level_ups += 1
        exp_max = level * 100

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è, –¥–æ—Å–≤—ñ–¥—É —Ç–∞ –æ—á–æ–∫ –ø—Ä–æ–∫–∞—á–∫–∏
    supabase.table("users").update({
        "exp": new_exp,
        "level": level,
        "exp_max": exp_max,
        "level_points": level_points + level_ups
    }).eq("user_id", user_id).execute()

    if level_ups > 0:
        await bot.send_message(
            user_id,
            f"üåü <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ <b>{level} —É—Ä–æ–≤–Ω—è</b>!\n"
            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{level_ups}</b> –æ—á–∫–æ –ø—Ä–æ–∫–∞—á–∫–∏!"
        )

# ---------- Clans ----------
CLANS = {
    "–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏ üåå": "üõ° <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–µ–µ –∏ –Ω–µ—É–ª–æ–≤–∏–º–æ–µ –±—Ä–∞—Ç—Å—Ç–≤–æ, —á—å—è —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º –∏ —Ç–∞–π–Ω–∞–º–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≥–ª—É–±–æ–∫–∞ –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–∞. –û–Ω–∏ ‚Äî –≤–µ—á–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏, —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –Ω–µ–±–µ—Å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –º–∏—Ä–æ–≤ –æ—Ç —É–≥—Ä–æ–∑, –∏—Å—Ö–æ–¥—è—â–∏—Ö –∏–∑ –±–µ–∑–¥–Ω—ã –∫–æ—Å–º–æ—Å–∞. –ò—Ö –≤–∑–≥–ª—è–¥ —É—Å—Ç—Ä–µ–º–ª–µ–Ω –∫ –∑–≤–µ–∑–¥–∞–º, –∞ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —Ä–∏—Ç–º–µ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤.",
    "–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏ üî•": "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–∏–π –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –æ—Ä–¥–µ–Ω, —á—å—è –º–∏—Å—Å–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ—Å—Ç–∏ —Å–≤–µ—Ç, –Ω–∞–¥–µ–∂–¥—É –∏ –∏—Å—Ç–∏–Ω—É —á–µ—Ä–µ–∑ —Å–∞–º—ã–µ —Ç–µ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞. –û–Ω–∏ ‚Äî –ø—É—Ç–µ–≤–æ–¥–Ω–∞—è –∑–≤–µ–∑–¥–∞ –¥–ª—è –∑–∞–±–ª—É–¥—à–∏—Ö, —Å–∏–º–≤–æ–ª –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π –≤–µ—Ä—ã –∏ –æ–ø–ª–æ—Ç –ø—Ä–æ—Ç–∏–≤ —Ç—å–º—ã –∏ —Ö–∞–æ—Å–∞. –ò—Ö —Å–∏–ª–∞ –∏—Å—Ö–æ–¥–∏—Ç –∏–∑ —á–∏—Å—Ç–æ—Ç—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π, –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ–º, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç.",
    "–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏ üåë": "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–µ–µ –±—Ä–∞—Ç—Å—Ç–≤–æ, —á—å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—É—Ç–∞–Ω–æ —Ç–∞–π–Ω–æ–π –∏ –ª–µ–≥–µ–Ω–¥–∞–º–∏. –û–Ω–∏ –Ω–µ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ —Å–ª–∞–≤–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –ø—Ä–∏–∑–Ω–∞–Ω–∏—é, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–Ω–µ–π, —Å–ª–æ–≤–Ω–æ –Ω–µ–≤–∏–¥–∏–º—ã–µ –≤–∏—Ö—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ª–∏—à—å —Å–ª–µ–¥ —Å—É–¥—å–±—ã.",
    "–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏ üéµ": "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî —ç—Ç–æ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —á—å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—É—Ç–∞–Ω–æ –∑–∞–≤–µ—Å–æ–π –ø–µ—á–∞–ª–∏ –∏ –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω. –û–Ω–∏ –Ω–µ –≤–ª–∞–¥–µ—é—Ç –æ—Å—Ç—Ä—ã–º–∏ –∫–ª–∏–Ω–∫–∞–º–∏ –∏–ª–∏ –≥—Ä–æ–º–æ–≥–ª–∞—Å–Ω—ã–º–∏ –∫—Ä–∏–∫–∞–º–∏, –∏—Ö –æ—Ä—É–∂–∏–µ ‚Äî —ç—Ç–æ —ç–º–æ—Ü–∏–∏, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç—Ö–æ –∑–∞–±—ã—Ç—ã—Ö –º–µ–ª–æ–¥–∏–π. –ß–ª–µ–Ω—ã —ç—Ç–æ–≥–æ –∫–ª–∞–Ω–∞ ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ —Å–∫–æ—Ä–±–∏, –Ω–æ—Å–∏—Ç–µ–ª–∏ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç—ã —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —á—É–≤—Å—Ç–≤."
}

SETS = {
    "strong": {
        "–ë–∞—Å—Ç–∏–æ–Ω –¢–∏—Ç–∞–Ω–∞": {
            "description": "üõ°Ô∏è –ú–∞—Å—Å–∏–≤–Ω—ã–π —Å–µ—Ç, –¥–∞—é—â–∏–π –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ —â–∏—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã",
            "items": [
                {"name": "–®–ª–µ–º –°—Ç—Ä–∞–∂–∞", "hp": 150, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"name": "–ü–ª–∞—â –ñ–∏–∑–Ω–∏", "hp": 250, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ó–∞—â–∏—Ç—ã", "hp": 70, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"name": "–ü–æ—è—Å –°–∫–∞–ª—ã", "hp": 130, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"name": "–ù–∞—Ä—É—á–∏ –¢–∏—Ç–∞–Ω–∞", "hp": 50, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"name": "–©–∏—Ç –í–µ—á–Ω–æ–π –°—Ç–∞–ª–∏", "hp": 150, "damage": 50, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–ö–ª–∏–Ω–æ–∫ –ë—É—Ä–∏": {
            "description": "‚öîÔ∏è –õ–µ–≥–∫–∏–π –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —É—Ä–æ–Ω",
            "items": [
                {"name": "–°–µ—Ä—å–≥–∏ –•–∏—â–Ω–∏–∫–∞", "hp": 30, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"name": "–ê–º—É–ª–µ—Ç –•–∏—â–Ω–∏–∫–∞", "hp": 60, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ì–Ω–µ–≤–∞", "hp": 20, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"name": "–ü–æ—è—Å –•–∏—â–Ω–∏–∫–∞", "hp": 30, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"name": "–°–∞–ø–æ–≥–∏ –ë—É—Ä–∏", "hp": 20, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"name": "–ú–µ—á –ë—É—Ä–∏", "hp": 0, "damage": 200, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–í–æ–∑–º–µ–∑–¥–∏–µ": {
            "description": "üó°Ô∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ç —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É—Ä–æ–Ω",
            "items": [
                {"name": "–®–ª–µ–º –°—É–¥—å–±—ã", "hp": 60, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"name": "–ê–º—É–ª–µ—Ç –ü—Ä–∞–≤–æ—Å—É–¥–∏—è", "hp": 120, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö–∞—Ä–∞—é—â–µ–≥–æ", "hp": 40, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"name": "–ü–æ—è—Å –û—Ç–≤–µ—Ç–∞", "hp": 60, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"name": "–°–∞–ø–æ–≥–∏ –Ø—Ä–æ—Å—Ç–∏", "hp": 40, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"name": "–ö–ª–∏–Ω–æ–∫ –í–æ–∑–º–µ–∑–¥–∏—è", "hp": 0, "damage": 100, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        }
    },
    "weak": {
        "–ó–∞–±—ã—Ç—ã–π –°—Ç—Ä–∞–∂": {
            "description": "üõ°Ô∏è –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ç —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —Å–ª–∞–±—ã–º —É—Ä–æ–Ω–æ–º",
            "items": [
                {"name": "–®–ª–µ–º –ë—ã–ª–æ–≥–æ", "hp": 25, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"name": "–î–æ—Å–ø–µ—Ö –ß–µ—Å—Ç–∏", "hp": 75, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"name": "–ù–∞—Ä—É—á–∏ –ë—ã–ª–æ–≥–æ", "hp": 25, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"name": "–ü–æ—è—Å –ù–µ—Ä—É—à–∏–º–æ—Å—Ç–∏", "hp": 50, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"name": "–ü–æ–Ω–æ–∂–∏ –ë—ã–ª–æ–≥–æ", "hp": 25, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"name": "–†–∂–∞–≤–∞—è –°–µ–∫–∏—Ä–∞", "hp": 0, "damage": 25, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–ó–≤—ë–∑–¥–Ω—ã–π –ñ–∏–≤–æ–ø–∏—Å–µ—Ü": {
            "description": "‚ú® –õ–µ–≥–∫–∏–π —Å–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º, –Ω–æ —Å–∏–ª—å–Ω—ã–º –æ—Ä—É–∂–∏–µ–º",
            "items": [
                {"name": "–ö–∞–ø—é—à–æ–Ω –°–≤–µ—Ç–∞", "hp": 5, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"name": "–ö—É—Ä—Ç–∫–∞ –°–≤–µ—Ç–∞", "hp": 15, "damage": 0, "body": "–¢–µ–ª–æ"},
                {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –ö—Ä–∞—Å–æ–∫", "hp": 15, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"name": "–Æ–±–∫–∞ –°–≤–µ—Ç–∞", "hp": 10, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"name": "–°–∞–ø–æ–≥–∏ –°–≤–µ—Ç–∞", "hp": 5, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"name": "–ö–ª–∏–Ω–æ–∫ –°–≤–µ—Ç–∞", "hp": 0, "damage": 100, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        },
        "–û—Ö–æ—Ç–Ω–∏–∫": {
            "description": "üèπ –°–µ—Ç –¥–ª—è –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—â–∏—Ç—ã, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –æ—Ä—É–∂–∏–µ",
            "items": [
                {"name": "–®–ª—è–ø–∞ –û—Ö–æ—Ç–Ω–∏–∫–∞", "hp": 10, "damage": 0, "head": "–ì–æ–ª–æ–≤–∞"},
                {"name": "–ü–ª–∞—â –¢–µ–Ω–µ–π", "hp": 40, "damage": 5, "body": "–¢–µ–ª–æ"},
                {"name": "–ü–µ—Ä—á–∞—Ç–∫–∏ –û—Ö–æ—Ç–Ω–∏–∫–∞", "hp": 15, "damage": 0, "gloves": "–ü–µ—Ä—á–∞—Ç–∫–∏"},
                {"name": "–®—Ç–∞–Ω—ã –û—Ö–æ—Ç–Ω–∏–∫–∞", "hp": 15, "damage": 0, "legs": "–ù–æ–≥–∏"},
                {"name": "–ö–æ–∂–∞–Ω—ã–µ –°–∞–ø–æ–≥–∏", "hp": 20, "damage": 0, "feet": "–°—Ç—É–ø–Ω–∏"},
                {"name": "–¢—Ä–æ—Å—Ç—å-—Ö–ª—ã—Å—Ç", "hp": 0, "damage": 45, "weapon": "–û—Ä—É–∂–∏–µ"}
            ]
        }
    }
}

ADVENTURES = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {
        "description": "üå≤ –ì—É—Å—Ç–æ–π, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ—Å, –æ–∫—É—Ç–∞–Ω–Ω—ã–π —Ç—É–º–∞–Ω–æ–º...",
        "mobs": ["–¢—É–º–∞–Ω–Ω—ã–π –í–æ–ª–∫", "–î—Ä–µ–≤–µ—Å–Ω—ã–π –°—Ç—Ä–∞–∂", "–õ–µ—Å–Ω–æ–π –ñ—É—Ç–µ–Ω—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –û–ª–µ–Ω—å", "–ö–æ—Ä–Ω–µ–ø–ª–µ—Ç"]
    },
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {
        "description": "üèöÔ∏è –ü—Ä–æ–∫–ª—è—Ç–∞—è –¥–µ—Ä–µ–≤–Ω—è, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∂—É—Ç–∫–∏–º–∏ —Ç–µ–Ω—è–º–∏...",
        "mobs": ["–ë–µ–∑–≥–ª–∞–∑—ã–π –ñ–∏—Ç–µ–ª—å", "–ü–µ–ø–µ–ª—å–Ω—ã–π –ü—ë—Å", "–ö–æ–ª–æ–∫–æ–ª–∏–π", "–°–ª–æ–º–∞–Ω–Ω—ã–π –ö—É–∫–ª–æ–≤–æ–¥", "–ñ–Ω–µ—Ü –ú–æ–ª—á–∞–Ω–∏—è"]
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {
        "description": "üè∞ –û–≥—Ä–æ–º–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å, –∑–∞–±—ã—Ç–∞—è –≤—Ä–µ–º–µ–Ω–µ–º...",
        "mobs": ["–ë–ª—É–∂–¥–∞—é—â–∏–π –†—ã—Ü–∞—Ä—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –î–µ–≤–∞", "–ì–∞—Ä–≥—É–ª—å—è-–ö–∞—Ä–∞—É–ª—å—â–∏—Ü–∞", "–ö–Ω–∏–∂–Ω—ã–π –£–∂–∞—Å", "–°—Ç–∞—Ä—ã–π –ö–ª—é—á–Ω–∏–∫"]
    }
}

LOCATIONS = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {
        "exp": (5, 10),
        "money": (10, 20),
        "duration": 15,
        "min_level": 1,
        "rarity_chances": {
            "epic": 5,
            "rare": 20,
            "common": 75
        }
    },
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {
        "exp": (15, 30),
        "money": (20, 40),
        "duration": 30,
        "min_level": 10,
        "rarity_chances": {
            "epic": 10,
            "rare": 25,
            "common": 65
        }
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {
        "exp": (40, 60),
        "money": (50, 100),
        "duration": 60,
        "min_level": 20,
        "rarity_chances": {
            "epic": 15,
            "rare": 30,
            "common": 55
        }
    }
}

MONSTERS = {
    "–¢—É–º–∞–Ω–Ω—ã–π –í–æ–ª–∫": {
        "hp": 100, "damage": 20, "dodge": 10, "counter": 0,
        "description": "–•–∏—â–Ω–∏–∫, —Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –≤ —Ç—É–º–∞–Ω–µ. –ë—ã—Å—Ç—Ä—ã–π –∏ –∫–æ–≤–∞—Ä–Ω—ã–π.",
        "rarity": "common"
    },
    "–î—Ä–µ–≤–µ—Å–Ω—ã–π –°—Ç—Ä–∞–∂": {
        "hp": 150, "damage": 10, "dodge": 0, "counter": 20,
        "description": "–°—É—â–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–Ω–µ–π –∏ –ª–∏—Å—Ç–≤—ã. –ó–∞—â–∏—â–∞–µ—Ç –ª–µ—Å –æ—Ç –Ω–µ–∑–≤–∞–Ω—ã—Ö –≥–æ—Å—Ç–µ–π.",
        "rarity": "common"
    },
    "–õ–µ—Å–Ω–æ–π –ñ—É—Ç–µ–Ω—å": {
        "hp": 100, "damage": 20, "dodge": 30, "counter": 10,
        "description": "–¢–≤–∞—Ä—å, –ø–æ—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ö–∞–º–∏ –ø—É—Ç–Ω–∏–∫–æ–≤. –ü–∏—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä–∞—Ö–æ–º –∏ –±–æ–ª—å—é.",
        "rarity": "rare"
    },
    "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –û–ª–µ–Ω—å": {
        "hp": 70, "damage": 10, "dodge": 50, "counter": 0,
        "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –¥—É—Ö –ª–µ—Å–∞. –í—Å—Ç—Ä–µ—á–∞ —Å –Ω–∏–º ‚Äî –∑–Ω–∞–∫ —Å—É–¥—å–±—ã.",
        "rarity": "rare"
    },
    "–ö–æ—Ä–Ω–µ–ø–ª–µ—Ç": {
        "hp": 200, "damage": 15, "dodge": 0, "counter": 30,
        "description": "–°—É—â–µ—Å—Ç–≤–æ –∏–∑ –∑–µ–º–ª–∏ –∏ –≤–µ—Ç–≤–µ–π. –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±—ã—á—É –∫–æ—Ä–Ω—è–º–∏.",
        "rarity": "epic"
    },

    "–ë–µ–∑–≥–ª–∞–∑—ã–π –ñ–∏—Ç–µ–ª—å": {
        "hp": 150, "damage": 20, "dodge": 30, "counter": 10,
        "description": "–ö–æ–≥–¥–∞-—Ç–æ —á–µ–ª–æ–≤–µ–∫. –¢–µ–ø–µ—Ä—å –ª–∏—à—å –æ–±–æ–ª–æ—á–∫–∞, –±—Ä–æ–¥—è—â–∞—è –ø–æ –¥–µ—Ä–µ–≤–Ω–µ.",
        "rarity": "common"
    },
    "–ü–µ–ø–µ–ª—å–Ω—ã–π –ü—ë—Å": {
        "hp": 70, "damage": 50, "dodge": 30, "counter": 5,
        "description": "–ü—ë—Å –∏–∑ –ø–µ–ø–ª–∞ –∏ –∫—Ä–∏–∫–æ–≤. –ò—â–µ—Ç —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞ –≤ –≤–µ—á–Ω–æ–π –º—É–∫–µ.",
        "rarity": "common"
    },
    "–ö–æ–ª–æ–∫–æ–ª–∏–π": {
        "hp": 200, "damage": 30, "dodge": 5, "counter": 40,
        "description": "–†–∂–∞–≤—ã–π –∫–æ–ª–æ–∫–æ–ª –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ–≤—ã. –ï–≥–æ –∑–≤–æ–Ω –ø–∞—Ä–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–∞—Ö–æ–º.",
        "rarity": "rare"
    },
    "–°–ª–æ–º–∞–Ω–Ω—ã–π –ö—É–∫–ª–æ–≤–æ–¥": {
        "hp": 100, "damage": 20, "dodge": 60, "counter": 0,
        "description": "–ú–∞—Å—Ç–µ—Ä –º–∞—Ä–∏–æ–Ω–µ—Ç–æ–∫, —Å—Ç–∞–≤—à–∏–π –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö.",
        "rarity": "rare"
    },
    "–ñ–Ω–µ—Ü –ú–æ–ª—á–∞–Ω–∏—è": {
        "hp": 500, "damage": 20, "dodge": 0, "counter": 20,
        "description": "–°–æ–±–∏—Ä–∞–µ—Ç –¥—É—à–∏ —Ç–µ—Ö, –∫—Ç–æ –∫—Ä–∏—á–∞–ª –≤ —Ç–µ–º–Ω–æ—Ç–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç.",
        "rarity": "epic"
    },
    "–ë–ª—É–∂–¥–∞—é—â–∏–π –†—ã—Ü–∞—Ä—å": {
        "hp": 150, "damage": 70, "dodge": 10, "counter": 50,
        "description": "–ö–æ–≥–¥–∞-—Ç–æ –∑–∞—â–∏—Ç–Ω–∏–∫ –∑–∞–º–∫–∞. –¢–µ–ø–µ—Ä—å –ª–∏—à—å —Ç–µ–Ω—å –≤ –±—Ä–æ–Ω–µ.",
        "rarity": "common"
    },
    "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –î–µ–≤–∞": {
        "hp": 400, "damage": 30, "dodge": 20, "counter": 30,
        "description": "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ç–∏—à–∏–Ω–µ. –ï—ë –ø–ª–∞—á —Å–ª—ã—à–µ–Ω –¥–∞–∂–µ —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã.",
        "rarity": "common"
    },
    "–ì–∞—Ä–≥—É–ª—å—è-–ö–∞—Ä–∞—É–ª—å—â–∏—Ü–∞": {
        "hp": 1000, "damage": 10, "dodge": 5, "counter": 5,
        "description": "–ö–∞–º–µ–Ω–Ω–æ–µ —á—É–¥–æ–≤–∏—â–µ, —á—Ç–æ –æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä—É–∏–Ω—ã. –ù–µ—É—Å—Ç–∞–Ω–Ω–∞ –∏ –±–µ—Å–ø–æ—â–∞–¥–Ω–∞.",
        "rarity": "rare"
    },
    "–ö–Ω–∏–∂–Ω—ã–π –£–∂–∞—Å": {
        "hp": 500, "damage": 200, "dodge": 0, "counter": 0,
        "description": "–°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π. –ü–æ–≥–ª–æ—â–∞–µ—Ç —Ä–∞–∑—É–º.",
        "rarity": "rare"
    },
    "–°—Ç–∞—Ä—ã–π –ö–ª—é—á–Ω–∏–∫": {
        "hp": 2000, "damage": 100, "dodge": 20, "counter": 30,
        "description": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–∞–º–∫–∞. –ë–µ–∑ –Ω–µ–≥–æ –¥–≤–µ—Ä–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è... –∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è.",
        "rarity": "epic"
    }
}


DROP_CHANCES = {
    "common": {"weak": 0.15, "strong": 0.05},
    "rare": {"weak": 0.20, "strong": 0.10},
    "epic": {"weak": 0.30, "strong": 0.15}
}


def random_strong_item():
    set_name = random.choice(list(SETS["strong"].keys()))
    chosen_set = SETS["strong"][set_name]
    item = random.choice(chosen_set["items"])
    return set_name, item

def random_weak_item():
    set_name = random.choice(list(SETS["weak"].keys()))
    chosen_set = SETS["weak"][set_name]
    item = random.choice(chosen_set["items"])
    return set_name, item

def get_random_monster(location_name: str, location_mobs: list):
    rarity_chances = LOCATIONS.get(location_name, {}).get("rarity_chances", {
        "epic": 10,
        "rare": 30,
        "common": 60
    })

    rarity_pool = {
        "epic": [],
        "rare": [],
        "common": []
    }

    for name in location_mobs:
        monster = MONSTERS.get(name)
        if not monster:
            continue
        rarity = monster.get("rarity", "common")
        monster = monster.copy()
        monster["name"] = name
        rarity_pool[rarity].append(monster)

    rarity = random.choices(
        population=list(rarity_chances.keys()),
        weights=list(rarity_chances.values()),
        k=1
    )[0]

    pool = rarity_pool.get(rarity, rarity_pool["common"])
    return random.choice(pool)

# ---------- Clan selection ----------
async def ask_clan_choice(message: types.Message):
    buttons = [[InlineKeyboardButton(text=clan, callback_data=f"clan_{clan.split()[0]}")] for clan in CLANS.keys()]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    description = (
        "üß≠ <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞–Ω–æ–≤:</b>\n\n"
        "üåå <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî –≤–æ–∏–Ω—ã —Å–≤–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ—Ä—è–¥–∫–∞\n"
        "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —Å–∏–º–≤–æ–ª –Ω–∞–¥–µ–∂–¥—ã –∏ —Å–∏–ª—ã –¥—É—Ö–∞\n"
        "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —Å–∫—Ä—ã—Ç–Ω—ã–µ –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ –±–æ–π—Ü—ã\n"
        "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî –º—É–¥—Ä–µ—Ü—ã, –≤–ª–∞–¥–µ—é—â–∏–µ —Ç–∞–π–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"
    )
    await message.answer(description, reply_markup=keyboard)

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    response = supabase.table("users").select("username, clan").eq("user_id", user_id).execute()
    row = response.data[0] if response.data else None

    if row and row.get("username") and row.get("clan"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    elif row and row.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")


async def start_adventure(message: types.Message, location_name: str):
    location = LOCATIONS.get(location_name)
    adventure = ADVENTURES.get(location_name)

    if not location or not adventure:
        await message.answer("‚ùó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    duration = location["duration"]
    user_id = message.from_user.id

    # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–æ–Ω—Å—Ç—Ä –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–¥–∫–æ—Å—Ç—ñ
    monster = get_random_monster(adventure['mobs'])

    name = monster["name"]
    hp = monster["hp"]
    dmg = monster["damage"]
    dodge = monster["dodge"]
    counter = monster["counter"]
    desc = monster["description"]
    rarity = monster["rarity"].capitalize()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–∏–≥–æ–¥–∏ —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á –∑ –º–æ–Ω—Å—Ç—Ä–æ–º
    await message.answer(
        f"üèÉ‚Äç‚ôÇÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ <b>{location_name}</b>\n\n"
        f"üëæ <b>–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞: {name}</b>\n"
        f"üìñ <i>{desc}</i>\n"
        f"üè∑ –†–µ–¥–∫–æ—Å—Ç—å: <b>{rarity}</b>\n\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{hp}</b>\n"
        f"üí• –£—Ä–æ–Ω: <b>{dmg}</b>\n"
        f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: <b>{dodge}%</b>\n"
        f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>{counter}%</b>\n\n"
        f"‚è≥ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è <b>{duration}</b> —Å–µ–∫—É–Ω–¥..."
    )

    # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    await asyncio.sleep(duration)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥—É
    exp = random.randint(*location["exp"])
    money = random.randint(*location["money"])

    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä–æ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_resp = supabase.table("users").select("money").eq("user_id", user_id).execute()
    current_money = user_resp.data[0]["money"] if user_resp.data else 0

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å–≤—ñ–¥ —Ç–∞ –≥—Ä–æ—à—ñ
    await add_experience(user_id, exp)
    supabase.table("users").update({
        "money": current_money + money
    }).eq("user_id", user_id).execute()

    # –ü—ñ–¥—Å—É–º–æ–∫
    await bot.send_message(
        user_id,
        f"‚úÖ <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üèûÔ∏è –õ–æ–∫–∞—Ü–∏—è: <b>{location_name}</b>\n"
        f"‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω –≤—Ä–∞–≥: <b>{name}</b>\n\n"
        f"üéñ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: <b>{exp}</b>\n"
        f"üí∞ –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{money}</b>",
        reply_markup=main_menu_kb
    )


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
    if user_id in waiting_for_nick:
        nickname = text

        if re.search(r"[;:/.\"<>'\\\\]", nickname) or "script" in nickname.lower():
            await message.answer("‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–æ–≤–æ.")
            return
        if not (3 <= len(nickname) <= 9):
            await message.answer("‚ùó –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if not re.match(r"^[A-Za-z0-9_]+$", nickname):
            await message.answer("‚ùó –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
            return

        supabase.table("users").upsert({"user_id": user_id, "username": nickname}).execute()
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{nickname}</b>! –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    profile_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéí –†—é–∫–∑–∞–∫"), KeyboardButton(text="‚öôÔ∏è –ü—Ä–æ–∫–∞—á–∫–∞")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
        ],
        resize_keyboard=True
    )

    # –°—Ç–≤–æ—Ä–∏–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    backpack_action_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öîÔ∏è –ù–∞–¥–µ—Ç—å"), KeyboardButton(text="‚ùå –°–Ω—è—Ç—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä—é–∫–∑–∞–∫–∞
    async def show_backpack(message: types.Message):
        user_id = message.from_user.id  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä—é–∫–∑–∞–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ backpack –≤ Supabase
        backpack_data = supabase.table("backpack").select("item_name, count").eq("user_id", user_id).execute()

        if backpack_data.data:
            items_message = "–í–∞—à–∏ –≤–µ—â–∏ –≤ —Ä—é–∫–∑–∞–∫–µ:\n\n"

            for item in backpack_data.data:
                item_name = item['item_name']
                item_count = item['count']
                items_message += f"{item_name} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_count} —à—Ç.)\n\n"

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            await message.answer(items_message, reply_markup=backpack_action_kb)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–µ—â–µ–π –≤ —Ä—é–∫–∑–∞–∫–µ.", reply_markup=backpack_action_kb)

        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞


    async def process_item_name(msg: types.Message):
        item_name = msg.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        user_id = msg.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        backpack_data = supabase.table("backpack").select("item_name, count").eq("user_id", user_id).execute()

        item_found = False
        for item in backpack_data.data:
            if item['item_name'] == item_name:
                item_found = True
                item_count = item['count']
                if item_count > 0:
                    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ç—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–ª–∞
                    item_details = None
                    part_of_body = None  # –î–ª—è —Å–ª–æ—Ç–∞
                    for set_type, set_data in SETS.items():
                        for set_name, set_items in set_data.items():
                            for set_item in set_items['items']:
                                if set_item['name'] == item_name:
                                    item_details = set_item
                                    part_of_body = next(iter(set_item.keys()))  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
                                    break
                            if item_details:
                                break
                        if item_details:
                            break

                    if item_details and part_of_body:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        update_data = {part_of_body: item_name}
                        supabase.table("users").update(update_data).eq("user_id", user_id).execute()

                        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫–µ
                        new_count = item_count - 1
                        supabase.table("backpack").update({"count": new_count}).eq("user_id", user_id).eq(
                            "item_name", item_name).execute()

                        await msg.answer(f"–í—ã –æ–¥–µ–ª–∏ {item_name} –Ω–∞ {part_of_body}!", reply_markup=backpack_action_kb)
                        return
                    else:
                        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.",
                                         reply_markup=backpack_action_kb)
                        return
                else:
                    await msg.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: {item_name} –≤ —Ä—é–∫–∑–∞–∫–µ.", reply_markup=backpack_action_kb)
                    return

        if not item_found:
            await msg.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä—é–∫–∑–∞–∫–µ.", reply_markup=backpack_action_kb)

    # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–¥–µ—Ç—å"
    async def handle_equip(message: types.Message):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–¥–µ—Ç—å:",
                             reply_markup=types.ReplyKeyboardRemove())

    # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        response = supabase.table("users").select("*").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None
        if row:
            clan_desc = CLANS.get(row.get("clan", ""), "")
            profile_text = (
                f"<b>{row['username']}</b> | <code>{user_id}</code>\n"
                f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {row['status']}\n\n"
                f"üåü –£—Ä–æ–≤–µ–Ω—å: {row['level']}\n"
                f"–û–ø—ã—Ç: {row['exp']} / {row['exp_max']}\n"
                f"–û—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏: {row.get('level_points', 0)}\n"
                f"‚ù§Ô∏è{row['health']} | üó°{row['attack']}\n\n"
                f"üí∞ –î–µ–Ω—å–≥–∏: {row['money']} | üíé –ê–ª–º–∞–∑—ã: {row['diamonds']}\n\n"
                f"ü•ã –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:\n"
                f"–ì–æ–ª–æ–≤–∞: {row['head']}\n"
                f"–¢–µ–ª–æ: {row['body']}\n"
                f"–ü–µ—Ä—á–∞—Ç–∫–∏: {row.get('gloves')}\n"
                f"–ù–æ–≥–∏: {row['legs']}\n"
                f"–°—Ç—É–ø–Ω–∏: {row['feet']}\n"
                f"–û—Ä—É–∂–∏–µ: {row['weapon']}\n"
                f"üí™ –ö–ª–∞–Ω: {row.get('clan', '–Ω–µ—Ç')}"
            )
            await message.answer(profile_text, reply_markup=profile_kb)
        else:
            waiting_for_nick.add(user_id)
            await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

    elif text == "üéí –†—é–∫–∑–∞–∫":
        await show_backpack(message)

    elif text == "‚öîÔ∏è –ù–∞–¥–µ—Ç—å":
        await handle_equip(message)

    elif text == "‚ùå –°–Ω—è—Ç—å":
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–Ω—è—Ç—Ç—è.", reply_markup=backpack_action_kb)

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=profile_kb)

    elif text == "‚öôÔ∏è –ü—Ä–æ–∫–∞—á–∫–∞":
        upgrade_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"), KeyboardButton(text="üó°Ô∏è –£—Ä–æ–Ω")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å:", reply_markup=upgrade_kb)

    elif text in ("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ", "üó°Ô∏è –£—Ä–æ–Ω"):
        resp = supabase.table("users").select("level_points", "health", "attack").eq("user_id", user_id).execute()
        if not resp.data:
            return
        user = resp.data[0]
        points = user["level_points"]
        if points <= 0:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤ –ø—Ä–æ–∫–∞—á–∫–∏.", reply_markup=profile_kb)
            return
        new_points = points - 1
        updates = {"level_points": new_points}
        if text == "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ":
            updates["health"] = user["health"] + 10
            await message.answer("‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ +10!</b>\n–í—ã —Å—Ç–∞–ª–∏ –∫—Ä–µ–ø—á–µ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ.")
        else:  # "üó°Ô∏è –£—Ä–æ–Ω"
            updates["attack"] = user["attack"] + 10
            await message.answer("üó°Ô∏è <b>–ê—Ç–∞–∫–∞ +10!</b>\n–¢–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å!")
        supabase.table("users").update(updates).eq("user_id", user_id).execute()
        updated = supabase.table("users").select("level_points", "health", "attack").eq("user_id", user_id).execute()
        new_user = updated.data[0]
        await message.answer(
            f"üß¨ <b>–¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{new_user['health']}</b>\n"
            f"üó°Ô∏è –£—Ä–æ–Ω: <b>{new_user['attack']}</b>\n"
            f"üéØ –û—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏: <b>{new_user['level_points']}</b>"
        )

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=profile_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)


    elif text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è":
        locations_info = ""
        for name, data in LOCATIONS.items():
            if name not in ADVENTURES:
                continue
            exp_range = f"{data['exp'][0]}‚Äì{data['exp'][1]}"
            money_range = f"{data['money'][0]}‚Äì{data['money'][1]}"
            duration = data["duration"]
            min_level = data.get("min_level", 1)
            locations_info += (
                f"üìç <b>{name}</b>\n"
                f"{ADVENTURES[name]['description']}\n"
                f"üîí –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: <b>{min_level}</b>\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b> | üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b> | ‚è± –í—Ä–µ–º—è: {duration} —Å–µ–∫.\n\n"
            )

        buttons = [
            [InlineKeyboardButton(text=name, callback_data=f"preview_{name}")]
            for name in LOCATIONS.keys() if name in ADVENTURES
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(f"üåç <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n{locations_info}", reply_markup=keyboard)

    elif text == "üí™ –ú–æ–π –∫–ª–∞–Ω":
        response = supabase.table("users").select("clan").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None
        if row and row.get("clan"):
            clan = row["clan"]
            clan_desc = CLANS.get(clan, "")
            members_resp = supabase.table("clan_members").select("user_id").eq("clan_name", clan).execute()
            members = members_resp.data or []
            user_ids = [m["user_id"] for m in members]
            users_resp = supabase.table("users").select("user_id, username").in_("user_id", user_ids).execute()
            id_to_username = {u["user_id"]: u["username"] for u in users_resp.data or []}
            members_list = "\n".join(f"- {id_to_username.get(uid, uid)}" for uid in user_ids) or "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            await message.answer(f"üí™ –ö–ª–∞–Ω: <b>{clan}</b>\n\n{clan_desc}\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_list}",
                                 reply_markup=main_menu_kb)
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω.", reply_markup=main_menu_kb)
            await ask_clan_choice(message)

    elif text == "üèÜ –¢–æ–ø":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:", reply_markup=top_menu_kb)

    elif text == "üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é":
        response = supabase.table("users").select("user_id, username, level").order("level", desc=True).execute()
        players = response.data or []
        top_10 = players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} üåü {p['level']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
        await message.answer(f"üåü <b>–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place}",
                             reply_markup=top_menu_kb)

    elif text == "üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º":
        response = supabase.table("users").select("user_id, username, money").order("money", desc=True).execute()
        players = response.data or []
        top_10 = players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} üí∞ {p['money']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
        await message.answer(f"üí∞ <b>–¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place}",
                             reply_markup=top_menu_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    elif text == "‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=forge_menu_kb)

    elif text in ("‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞", "üî® –ö—Ä–∞—Ñ—Ç"):
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=forge_menu_kb)

    elif text == "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è":
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=main_menu_kb)

# ---------- Callback: Clan selection ----------
@dp.callback_query()
async def handle_clan_callbacks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    try:
        if data.startswith("clan_"):
            await callback.answer()
            clan_key = data[5:]
            clan_name = next((name for name in CLANS if name.startswith(clan_key)), None)
            if not clan_name:
                await callback.answer("‚ùó –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            desc = CLANS[clan_name]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{clan_key}"),
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_clans")
                ]
            ])
            await callback.message.edit_text(desc, reply_markup=keyboard)

        elif data.startswith("select_"):
            await callback.answer()
            clan_key = data[7:]
            clan_name = next((name for name in CLANS if name.startswith(clan_key)), None)
            if not clan_name:
                await callback.answer("‚ùó –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            supabase.table("users").update({"clan": clan_name}).eq("user_id", user_id).execute()
            supabase.table("clan_members").upsert({"clan_name": clan_name, "user_id": user_id}).execute()

            await callback.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω:\n\n{CLANS[clan_name]}")
            await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_menu_kb)

        elif data == "back_to_clans":
            await callback.answer()
            await ask_clan_choice(callback.message)

        elif data.startswith("adventure_"):
            await callback.answer()
            location_name = data[len("adventure_"):]
            adventure = ADVENTURES.get(location_name)
            if not adventure:
                await callback.answer("‚ùó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            mob_preview = random.choice(adventure["mobs"])
            location_info = LOCATIONS[location_name]
            exp_range = f"{location_info['exp'][0]}‚Äì{location_info['exp'][1]}"
            money_range = f"{location_info['money'][0]}‚Äì{location_info['money'][1]}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_adv_{location_name}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
            ])

            await callback.message.edit_text(
                f"üìç <b>{location_name}</b>\n"
                f"{adventure['description']}\n\n"
                f"üëæ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–∞–≥–∏: <i>{', '.join(adventure['mobs'])}</i>\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b>\n"
                f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b>",
                reply_markup=keyboard
            )

        elif data.startswith("preview_"):
            await callback.answer()
            location_name = data[len("preview_"):]
            adventure = ADVENTURES.get(location_name)
            location = LOCATIONS.get(location_name)

            if not adventure or not location:
                await callback.answer("‚ùó –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            exp_range = f"{location['exp'][0]}‚Äì{location['exp'][1]}"
            money_range = f"{location['money'][0]}‚Äì{location['money'][1]}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_adv_{location_name}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
            ])

            await callback.message.edit_text(
                f"üìç <b>{location_name}</b>\n"
                f"{adventure['description']}\n\n"
                f"üëæ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–∞–≥–∏: <i>{', '.join(adventure['mobs'])}</i>\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b>\n"
                f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b>",
                reply_markup=keyboard
            )
        elif data.startswith("start_adv_"):
            await callback.answer()
            location_name = data[len("start_adv_"):]
            location = LOCATIONS.get(location_name)
            if not location:
                await callback.answer("‚ùó –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            user_data = supabase.table("users").select("level").eq("user_id", user_id).execute()
            user_level = user_data.data[0]["level"] if user_data.data else 1
            required_level = location.get("min_level", 1)
            if user_level < required_level:
                await callback.answer(f"üîí –î–æ—Å—Ç—É–ø–Ω–æ —Å {required_level} —É—Ä–æ–≤–Ω—è.", show_alert=True)
                return
            now = datetime.utcnow()
            existing_status = supabase.table("adventure_status").select("*").eq("user_id", user_id).execute()
            if existing_status.data:
                end_time_str = existing_status.data[0]["end_time"]
                end_time = datetime.fromisoformat(end_time_str)
                if end_time > now:
                    remaining = (end_time - now).seconds
                    await callback.answer(f"‚è≥ –¢—ã —É–∂–µ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫.", show_alert=True)
                    return
                else:
                    supabase.table("adventure_status").delete().eq("user_id", user_id).execute()
            duration = location["duration"]
            end_time = now + timedelta(seconds=duration)
            adventure = ADVENTURES.get(location_name)
            monster = get_random_monster(location_name, adventure["mobs"])
            mob = monster["name"]
            desc = monster["description"]
            hp = monster["hp"]
            dmg = monster["damage"]
            dodge = monster["dodge"]
            counter = monster["counter"]
            rarity = monster["rarity"].capitalize()
            exp = random.randint(*location["exp"])
            money = random.randint(*location["money"])
            try:
                await callback.message.delete()
            except Exception:
                pass
            supabase.table("adventure_status").upsert({
                "user_id": user_id,
                "location": location_name,
                "end_time": end_time.isoformat()
            }).execute()
            await bot.send_message(
                user_id,
                f"üèÉ‚Äç‚ôÇÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ <b>{location_name}</b>\n\n"
                f"üëæ <b>–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞: {mob}</b>\n"
                f"üìñ <i>{desc}</i>\n"
                f"üè∑ –†–µ–¥–∫–æ—Å—Ç—å: <b>{rarity}</b>\n\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{hp}</b>\n"
                f"üí• –£—Ä–æ–Ω: <b>{dmg}</b>\n"
                f"üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: <b>{dodge}%</b>\n"
                f"üîÅ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>{counter}%</b>\n\n"
                f"‚è≥ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è <b>{duration}</b> —Å–µ–∫."
            )
            await asyncio.sleep(duration)
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è ‚Äî –Ω–∞–≥—Ä–∞–¥—ã
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏ –æ–ø—ã—Ç
            user_data = supabase.table("users").select("money").eq("user_id", user_id).execute()
            current_money = user_data.data[0]["money"] if user_data.data else 0
            await add_experience(user_id, exp)
            supabase.table("users").update({
                "money": current_money + money
            }).eq("user_id", user_id).execute()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
            supabase.table("adventure_status").delete().eq("user_id", user_id).execute()

            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            rarity_key = monster["rarity"].lower()
            drop_chances = DROP_CHANCES.get(rarity_key, {"weak": 0.10, "strong": 0.02})

            drop_roll = random.random()
            item_dropped = None

            if drop_roll < drop_chances["weak"]:
                set_name, item = random_weak_item()
                item_dropped = item
                rarity_type = "—Å–ª–∞–±—ã–π"
            elif drop_roll < drop_chances["weak"] + drop_chances["strong"]:
                set_name, item = random_strong_item()
                item_dropped = item
                rarity_type = "—Å–∏–ª—å–Ω—ã–π"

            # –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∏ –∫–ª–∞–¥—ë–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä–æ–ø
            if item_dropped:
                item_name = item_dropped["name"]
                await bot.send_message(
                    user_id,
                    f"üéâ –¢–µ–±–µ –≤—ã–ø–∞–ª {rarity_type} –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–µ—Ç–∞ <b>{set_name}</b>:\n"
                    f"üß© <b>{item_name}</b>"
                )
                existing = supabase.table("backpack").select("count").eq("user_id", user_id).eq("item_name",
                                                                                                item_name).execute()
                if existing.data:
                    current_count = existing.data[0]["count"]
                    supabase.table("backpack").update({
                        "count": current_count + 1
                    }).eq("user_id", user_id).eq("item_name", item_name).execute()
                else:
                    supabase.table("backpack").insert({
                        "user_id": user_id,
                        "item_name": item_name,
                        "count": 1
                    }).execute()

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
            await bot.send_message(
                user_id,
                f"‚úÖ <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"üèûÔ∏è –õ–æ–∫–∞—Ü–∏—è: <b>{location_name}</b>\n"
                f"‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π –≤—Ä–∞–≥: <b>{mob}</b>\n\n"
                f"üéñ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: <b>{exp}</b>\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{money}</b>",
                reply_markup=main_menu_kb
            )


        elif data == "back_to_adventures":
            await callback.answer()
            buttons = [
                [InlineKeyboardButton(text=f"{name} {emoji}", callback_data=f"adventure_{name}")]
                for name, emoji in zip(ADVENTURES.keys(), ["üå≤", "üèöÔ∏è", "üè∞"])
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.edit_text("üåç <b>–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:</b>", reply_markup=keyboard)

        else:
            await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

    except Exception as e:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        print(f"Callback error: {e}")


# ---------- Run bot ----------
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
