import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from supabase import create_client, Client

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("BOT_TOKEN, SUPABASE_URL –∞–±–æ SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ñ!")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

waiting_for_nick = set()

# === –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ===
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton("ü™® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí™ –ú–æ–π –∫–ª–∞–Ω"),
         KeyboardButton("üèÜ –¢–æ–ø"), KeyboardButton("üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

# === Supabase —Ñ—É–Ω–∫—Ü—ñ—ó ===
def add_user(user_id, username):
    supabase.table("users").upsert({
        "user_id": user_id,
        "username": username,
        "status": "–ò–≥—Ä–æ–∫",
        "level": 1,
        "exp": 0,
        "exp_max": 100,
        "health": 100,
        "defense": 10,
        "attack": 50,
        "money": 0,
        "diamonds": 0,
        "head": "–Ω–µ—Ç",
        "body": "–Ω–µ—Ç",
        "legs": "–Ω–µ—Ç",
        "feet": "–Ω–µ—Ç",
        "weapon": "–Ω–µ—Ç",
        "bag": "–Ω–µ—Ç",
        "premium_until": None
    }).execute()

def get_user(user_id):
    result = supabase.table("users").select("*").eq("user_id", user_id).execute()
    return result.data[0] if result.data else None

def get_all_users():
    return supabase.table("users").select("*").execute().data

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = await asyncio.to_thread(get_user, message.from_user.id)
    if user and user.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=main_menu_kb)
    else:
        waiting_for_nick.add(message.from_user.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
@dp.message()
async def handle_message(message: types.Message):
    uid = message.from_user.id
    text = message.text.strip()

    if uid in waiting_for_nick:
        if len(text) < 3:
            return await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        await asyncio.to_thread(add_user, uid, text)
        waiting_for_nick.remove(uid)
        return await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{text}</b>! –ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=main_menu_kb)

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user = await asyncio.to_thread(get_user, uid)
        if user:
            await message.answer(
                f"<b>{user['username']}</b> | <code>{uid}</code>\n"
                f"–°—Ç–∞—Ç—É—Å: {user['status']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {user['level']} | –û–ø—ã—Ç: {user['exp']} / {user['exp_max']}\n"
                f"‚ù§Ô∏è {user['health']} üõ° {user['defense']} üó° {user['attack']}\n"
                f"ü™ô {user['money']} üíé {user['diamonds']}\n"
                f"ü•ã –û–¥–µ–∂–¥–∞: –ì–æ–ª–æ–≤–∞: {user['head']}, –¢–µ–ª–æ: {user['body']}, –ù–æ–≥–∏: {user['legs']}, –°—Ç—É–ø–Ω–∏: {user['feet']}\n"
                f"ü™õ –û—Ä—É–∂–∏–µ: {user['weapon']} | üß∞ –°—É–º–∫–∞: {user['bag']}\n"
                f"‚≠ê Premium –¥–æ: {user['premium_until'] or '–ù–µ—Ç'}",
                reply_markup=main_menu_kb
            )
        else:
            waiting_for_nick.add(uid)
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ –Ω–∏–∫–Ω–µ–π–º.")

    elif text == "üèÜ –¢–æ–ø":
        users = await asyncio.to_thread(get_all_users)
        if users:
            lst = "\n".join(f"{i+1}. {u['username']}" for i, u in enumerate(users))
            await message.answer(f"üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n{lst}", reply_markup=main_menu_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=main_menu_kb)

    elif text in ["üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "ü™® –ö—Ä–∞—Ñ—Ç", "üí™ –ú–æ–π –∫–ª–∞–Ω", "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è"]:
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{text}</b>", reply_markup=main_menu_kb)

    else:
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.", reply_markup=main_menu_kb)

# === –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É ===
async def notify_users_on_start():
    users = await asyncio.to_thread(get_all_users)
    for u in users:
        try:
            await bot.send_message(u["user_id"], "ü§ñ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        except:
            pass

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
