import os
import asyncio
import re
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv

# ---------- Load environment ----------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

if not TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN, SUPABASE_URL —Ç–∞ SUPABASE_ANON_KEY –≤ .env")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

waiting_for_nick = set()

# ---------- Keyboards ----------
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"), KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

top_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"), KeyboardButton(text="üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")],
    ],
    resize_keyboard=True
)

forge_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞"), KeyboardButton(text="üî® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è")]
    ],
    resize_keyboard=True
)
async def notify_users_on_start():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –∞–±–æ —ñ–Ω—à—ñ –¥—ñ—ó


# ----------EXP ----------
async def add_experience(user_id: int, amount: int):
    response = supabase.table("users").select("exp, level").eq("user_id", user_id).execute()
    if not response.data:
        return

    user = response.data[0]
    current_exp = user.get("exp", 0)
    level = user.get("level", 1)

    new_exp = current_exp + amount
    exp_max = level * 100
    level_ups = 0

    while new_exp >= exp_max:
        new_exp -= exp_max
        level += 1
        level_ups += 1
        exp_max = level * 100

    supabase.table("users").update({
        "exp": new_exp,
        "level": level,
        "exp_max": exp_max
    }).eq("user_id", user_id).execute()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ª–µ–≤–µ–ª-–∞–ø–µ
    if level_ups > 0:
        await bot.send_message(
            user_id,
            f"üåü <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ <b>{level} —É—Ä–æ–≤–Ω—è</b>!"
        )


# ---------- Clans ----------
CLANS = {
    "–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏ üåå": "üõ° <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–µ–µ –∏ –Ω–µ—É–ª–æ–≤–∏–º–æ–µ –±—Ä–∞—Ç—Å—Ç–≤–æ, —á—å—è —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º –∏ —Ç–∞–π–Ω–∞–º–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≥–ª—É–±–æ–∫–∞ –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–∞. –û–Ω–∏ ‚Äî –≤–µ—á–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏, —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –Ω–µ–±–µ—Å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –º–∏—Ä–æ–≤ –æ—Ç —É–≥—Ä–æ–∑, –∏—Å—Ö–æ–¥—è—â–∏—Ö –∏–∑ –±–µ–∑–¥–Ω—ã –∫–æ—Å–º–æ—Å–∞. –ò—Ö –≤–∑–≥–ª—è–¥ —É—Å—Ç—Ä–µ–º–ª–µ–Ω –∫ –∑–≤–µ–∑–¥–∞–º, –∞ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —Ä–∏—Ç–º–µ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤.",
    "–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏ üî•": "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–∏–π –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –æ—Ä–¥–µ–Ω, —á—å—è –º–∏—Å—Å–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ—Å—Ç–∏ —Å–≤–µ—Ç, –Ω–∞–¥–µ–∂–¥—É –∏ –∏—Å—Ç–∏–Ω—É —á–µ—Ä–µ–∑ —Å–∞–º—ã–µ —Ç–µ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞. –û–Ω–∏ ‚Äî –ø—É—Ç–µ–≤–æ–¥–Ω–∞—è –∑–≤–µ–∑–¥–∞ –¥–ª—è –∑–∞–±–ª—É–¥—à–∏—Ö, —Å–∏–º–≤–æ–ª –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π –≤–µ—Ä—ã –∏ –æ–ø–ª–æ—Ç –ø—Ä–æ—Ç–∏–≤ —Ç—å–º—ã –∏ —Ö–∞–æ—Å–∞. –ò—Ö —Å–∏–ª–∞ –∏—Å—Ö–æ–¥–∏—Ç –∏–∑ —á–∏—Å—Ç–æ—Ç—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π, –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ–º, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç.",
    "–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏ üåë": "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–µ–µ –±—Ä–∞—Ç—Å—Ç–≤–æ, —á—å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—É—Ç–∞–Ω–æ —Ç–∞–π–Ω–æ–π –∏ –ª–µ–≥–µ–Ω–¥–∞–º–∏. –û–Ω–∏ –Ω–µ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ —Å–ª–∞–≤–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –ø—Ä–∏–∑–Ω–∞–Ω–∏—é, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–Ω–µ–π, —Å–ª–æ–≤–Ω–æ –Ω–µ–≤–∏–¥–∏–º—ã–µ –≤–∏—Ö—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ª–∏—à—å —Å–ª–µ–¥ —Å—É–¥—å–±—ã.",
    "–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏ üéµ": "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî —ç—Ç–æ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —á—å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—É—Ç–∞–Ω–æ –∑–∞–≤–µ—Å–æ–π –ø–µ—á–∞–ª–∏ –∏ –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω. –û–Ω–∏ –Ω–µ –≤–ª–∞–¥–µ—é—Ç –æ—Å—Ç—Ä—ã–º–∏ –∫–ª–∏–Ω–∫–∞–º–∏ –∏–ª–∏ –≥—Ä–æ–º–æ–≥–ª–∞—Å–Ω—ã–º–∏ –∫—Ä–∏–∫–∞–º–∏, –∏—Ö –æ—Ä—É–∂–∏–µ ‚Äî —ç—Ç–æ —ç–º–æ—Ü–∏–∏, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç—Ö–æ –∑–∞–±—ã—Ç—ã—Ö –º–µ–ª–æ–¥–∏–π. –ß–ª–µ–Ω—ã —ç—Ç–æ–≥–æ –∫–ª–∞–Ω–∞ ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ —Å–∫–æ—Ä–±–∏, –Ω–æ—Å–∏—Ç–µ–ª–∏ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç—ã —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —á—É–≤—Å—Ç–≤."
}

ADVENTURES = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {
        "description": "üå≤ –ì—É—Å—Ç–æ–π, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ—Å, –æ–∫—É—Ç–∞–Ω–Ω—ã–π —Ç—É–º–∞–Ω–æ–º...",
        "mobs": ["–¢—É–º–∞–Ω–Ω—ã–π –í–æ–ª–∫", "–î—Ä–µ–≤–µ—Å–Ω—ã–π –°—Ç—Ä–∞–∂", "–õ–µ—Å–Ω–æ–π –ñ—É—Ç–µ–Ω—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –û–ª–µ–Ω—å", "–ö–æ—Ä–Ω–µ–ø–ª–µ—Ç"]
    },
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {
        "description": "üèöÔ∏è –ü—Ä–æ–∫–ª—è—Ç–∞—è –¥–µ—Ä–µ–≤–Ω—è, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∂—É—Ç–∫–∏–º–∏ —Ç–µ–Ω—è–º–∏...",
        "mobs": ["–ë–µ–∑–≥–ª–∞–∑—ã–π –ñ–∏—Ç–µ–ª—å", "–ü–µ–ø–µ–ª—å–Ω—ã–π –ü—ë—Å", "–ö–æ–ª–æ–∫–æ–ª–∏–π", "–°–ª–æ–º–∞–Ω–Ω—ã–π –ö—É–∫–ª–æ–≤–æ–¥", "–ñ–Ω–µ—Ü –ú–æ–ª—á–∞–Ω–∏—è"]
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {
        "description": "üè∞ –û–≥—Ä–æ–º–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å, –∑–∞–±—ã—Ç–∞—è –≤—Ä–µ–º–µ–Ω–µ–º...",
        "mobs": ["–ë–ª—É–∂–¥–∞—é—â–∏–π –†—ã—Ü–∞—Ä—å", "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –î–µ–≤–∞", "–ì–∞—Ä–≥—É–ª—å—è-–ö–∞—Ä–∞—É–ª—å—â–∏—Ü–∞", "–ö–Ω–∏–∂–Ω—ã–π –£–∂–∞—Å", "–°—Ç–∞—Ä—ã–π –ö–ª—é—á–Ω–∏–∫"]
    }
}

LOCATIONS = {
    "–ë–æ–ª—å—à–æ–π –õ–µ—Å": {"exp": (10, 30), "money": (20, 40), "duration": 5},  # 5 —Å–µ–∫—É–Ω–¥
    "–ú—ë—Ä—Ç–≤–∞—è –î–µ—Ä–µ–≤–Ω—è": {"exp": (20, 50), "money": (30, 60), "duration": 10},
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ó–∞–º–æ–∫": {"exp": (40, 60), "money": (50, 80), "duration": 15},
}


# ---------- Clan selection ----------
async def ask_clan_choice(message: types.Message):
    buttons = [[InlineKeyboardButton(text=clan, callback_data=f"clan_{clan.split()[0]}")] for clan in CLANS.keys()]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    description = (
        "üß≠ <b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞–Ω–æ–≤:</b>\n\n"
        "üåå <b>–ó–≤–µ–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏</b> ‚Äî –≤–æ–∏–Ω—ã —Å–≤–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ—Ä—è–¥–∫–∞\n"
        "üî• <b>–°–∏—è—é—â–∏–µ –º–∞—è–∫–∏</b> ‚Äî —Å–∏–º–≤–æ–ª –Ω–∞–¥–µ–∂–¥—ã –∏ —Å–∏–ª—ã –¥—É—Ö–∞\n"
        "üåë <b>–¢–µ–Ω–∏—Å—Ç—ã–µ –∫–ª–∏–Ω–∫–∏</b> ‚Äî —Å–∫—Ä—ã—Ç–Ω—ã–µ –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ –±–æ–π—Ü—ã\n"
        "üéµ <b>–ë–µ–∑–º–æ–ª–≤–Ω—ã–µ –ø–µ—Å–Ω–∏</b> ‚Äî –º—É–¥—Ä–µ—Ü—ã, –≤–ª–∞–¥–µ—é—â–∏–µ —Ç–∞–π–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"
    )
    await message.answer(description, reply_markup=keyboard)

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    response = supabase.table("users").select("username, clan").eq("user_id", user_id).execute()
    row = response.data[0] if response.data else None

    if row and row.get("username") and row.get("clan"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    elif row and row.get("username"):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row['username']}</b>! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")


async def start_adventure(message: types.Message, location_name: str):
    location = LOCATIONS.get(location_name)
    adventure = ADVENTURES.get(location_name)

    if not location or not adventure:
        await message.answer("‚ùó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    duration = location["duration"]  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    user_id = message.from_user.id

    mob = random.choice(adventure["mobs"])
    exp = random.randint(*location["exp"])
    money = random.randint(*location["money"])

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    await message.answer(
        f"üèÉ‚Äç‚ôÇÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ <b>{location_name}</b>\n"
        f"üëæ –í—Å—Ç—Ä–µ—á–∞–µ—à—å: <b>{mob}</b>\n"
        f"‚è≥ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è <b>{duration} —Å–µ–∫—É–Ω–¥...</b>\n"
        f"üîï –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
    )

    # –û–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
    await asyncio.sleep(duration)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥
    user_resp = supabase.table("users").select("money").eq("user_id", user_id).execute()
    current_money = user_resp.data[0]["money"] if user_resp.data else 0

    # –û–±–Ω–æ–≤–ª—è–µ–º EXP
    await add_experience(user_id, exp)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    supabase.table("users").update({
        "money": current_money + money
    }).eq("user_id", user_id).execute()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await bot.send_message(
        user_id,
        f"‚úÖ <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üèûÔ∏è –õ–æ–∫–∞—Ü–∏—è: <b>{location_name}</b>\n"
        f"‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω –≤—Ä–∞–≥: <b>{mob}</b>\n\n"
        f"üéñ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: <b>{exp}</b>\n"
        f"üí∞ –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{money}</b>",
        reply_markup=main_menu_kb
    )

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in waiting_for_nick:
        nickname = text

        if re.search(r"[;:/.\"<>'\\\\]", nickname) or "script" in nickname.lower():
            await message.answer("‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–æ–≤–æ.")
            return
        if not (3 <= len(nickname) <= 9):
            await message.answer("‚ùó –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if not re.match(r"^[A-Za-z0-9_]+$", nickname):
            await message.answer("‚ùó –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
            return

        supabase.table("users").upsert({"user_id": user_id, "username": nickname}).execute()
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{nickname}</b>! –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞–Ω.")
        await ask_clan_choice(message)
        return

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        response = supabase.table("users").select("*").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None
        if row:
            clan_desc = CLANS.get(row.get("clan", ""), "")
            profile_text = (
                f"<b>{row['username']}</b> | <code>{user_id}</code>\n"
                f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {row['status']}\n\n"
                f"üåü –£—Ä–æ–≤–µ–Ω—å: {row['level']}\n"
                f"–û–ø—ã—Ç: {row['exp']} / {row['exp_max']}\n"
                f"‚ù§Ô∏è{row['health']} | üõ°{row['defense']} | üó°{row['attack']}\n\n"
                f"üí∞ –î–µ–Ω—å–≥–∏: {row['money']} | üíé –ê–ª–º–∞–∑—ã: {row['diamonds']}\n\n"
                f"ü•ã –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:\n"
                f"–ì–æ–ª–æ–≤–∞: {row['head']}\n–¢–µ–ª–æ: {row['body']}\n–ù–æ–≥–∏: {row['legs']}\n–°—Ç—É–ø–Ω–∏: {row['feet']}\n"
                f"–û—Ä—É–∂–∏–µ: {row['weapon']}\n"
                f"–°—É–º–∫–∞: {row['bag']}\n\n"
                f"üí™ –ö–ª–∞–Ω: {row.get('clan', '–Ω–µ—Ç')}"
            )
            await message.answer(profile_text, reply_markup=main_menu_kb)
        else:
            waiting_for_nick.add(user_id)
            await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")





    elif text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è":
        locations_info = ""
        for name, data in LOCATIONS.items():
            exp_range = f"{data['exp'][0]}‚Äì{data['exp'][1]}"
            money_range = f"{data['money'][0]}‚Äì{data['money'][1]}"
            duration = data["duration"]
            locations_info += (
                f"üìç <b>{name}</b>\n"
                f"{ADVENTURES[name]['description']}\n"
                f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b> | üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b> | ‚è± –í—Ä–µ–º—è: {duration} —Å–µ–∫.\n\n"
            )
        # –ö–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
        buttons = [
            [InlineKeyboardButton(text=name, callback_data=f"preview_{name}")]
            for name in ADVENTURES.keys()
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(f"üåç <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n{locations_info}", reply_markup=keyboard)




    elif text == "üí™ –ú–æ–π –∫–ª–∞–Ω":
        response = supabase.table("users").select("clan").eq("user_id", user_id).execute()
        row = response.data[0] if response.data else None
        if row and row.get("clan"):
            clan = row["clan"]
            clan_desc = CLANS.get(clan, "")
            members_resp = supabase.table("clan_members").select("user_id").eq("clan_name", clan).execute()
            members = members_resp.data or []
            user_ids = [m["user_id"] for m in members]
            users_resp = supabase.table("users").select("user_id, username").in_("user_id", user_ids).execute()
            id_to_username = {u["user_id"]: u["username"] for u in users_resp.data or []}
            members_list = "\n".join(f"- {id_to_username.get(uid, uid)}" for uid in user_ids) or "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            await message.answer(f"üí™ –ö–ª–∞–Ω: <b>{clan}</b>\n\n{clan_desc}\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_list}", reply_markup=main_menu_kb)
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω.", reply_markup=main_menu_kb)
            await ask_clan_choice(message)

    elif text == "üèÜ –¢–æ–ø":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:", reply_markup=top_menu_kb)

    elif text == "üåü –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é":
        response = supabase.table("users").select("user_id, username, level").order("level", desc=True).execute()
        players = response.data or []
        top_10 = players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} üåü {p['level']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
        await message.answer(f"üåü <b>–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place}", reply_markup=top_menu_kb)

    elif text == "üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º":
        response = supabase.table("users").select("user_id, username, money").order("money", desc=True).execute()
        players = response.data or []
        top_10 = players[:10]
        players_list = "\n".join(f"{i + 1}. {p['username']} üí∞ {p['money']}" for i, p in enumerate(top_10))
        place = next((i + 1 for i, p in enumerate(players) if p["user_id"] == user_id), None)
        await message.answer(f"üí∞ <b>–¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º:</b>\n\n{players_list}\n\nüìç–¢–≤–æ–µ –º–µ—Å—Ç–æ: {place}", reply_markup=top_menu_kb)

    elif text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–∞—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    elif text == "‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=forge_menu_kb)

    elif text in ("‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞", "üî® –ö—Ä–∞—Ñ—Ç"):
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=forge_menu_kb)

    elif text == "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è":
        await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=main_menu_kb)

    else:
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.", reply_markup=main_menu_kb)

# ---------- Callback: Clan selection ----------
@dp.callback_query()
async def handle_clan_callbacks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if data.startswith("clan_"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
        clan_key = data[5:]
        clan_name = next((name for name in CLANS if name.startswith(clan_key)), None)
        if not clan_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        desc = CLANS[clan_name]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{clan_key}"),
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_clans")
            ]
        ])
        await callback.message.edit_text(desc, reply_markup=keyboard)
        await callback.answer()

    elif data.startswith("select_"):
        # –í—ã–±–æ—Ä –∫–ª–∞–Ω–∞
        clan_key = data[7:]
        clan_name = next((name for name in CLANS if name.startswith(clan_key)), None)
        if not clan_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        supabase.table("users").update({"clan": clan_name}).eq("user_id", user_id).execute()
        supabase.table("clan_members").upsert({"clan_name": clan_name, "user_id": user_id}).execute()

        await callback.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞–Ω:\n\n{CLANS[clan_name]}")
        await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_menu_kb)
        await callback.answer("–ö–ª–∞–Ω –≤—ã–±—Ä–∞–Ω!")

    elif data == "back_to_clans":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞–Ω–∞
        await ask_clan_choice(callback.message)
        await callback.answer()

    elif data.startswith("adventure_"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        location_name = data[len("adventure_"):]
        adventure = ADVENTURES.get(location_name)
        if not adventure:
            await callback.answer("‚ùó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        mob_preview = random.choice(adventure["mobs"])
        location_info = LOCATIONS[location_name]
        exp_range = f"{location_info['exp'][0]}‚Äì{location_info['exp'][1]}"
        money_range = f"{location_info['money'][0]}‚Äì{location_info['money'][1]}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_adv_{location_name}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
        ])

        await callback.message.edit_text(
            f"üìç <b>{location_name}</b>\n"
            f"{adventure['description']}\n\n"
            f"üëæ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–∞–≥–∏: <i>{', '.join(adventure['mobs'])}</i>\n"
            f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b>\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b>\n",
            reply_markup=keyboard
        )
        await callback.answer()

    elif data.startswith("preview_"):
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è preview_)
        location_name = data[len("preview_"):]
        adventure = ADVENTURES.get(location_name)
        location = LOCATIONS.get(location_name)

        if not adventure or not location:
            await callback.answer("‚ùó –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        exp_range = f"{location['exp'][0]}‚Äì{location['exp'][1]}"
        money_range = f"{location['money'][0]}‚Äì{location['money'][1]}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_adv_{location_name}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adventures")]
        ])

        await callback.message.edit_text(
            f"üìç <b>{location_name}</b>\n"
            f"{adventure['description']}\n\n"
            f"üëæ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–∞–≥–∏: <i>{', '.join(adventure['mobs'])}</i>\n"
            f"üéñ –û–ø—ã—Ç: <b>{exp_range}</b>\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money_range}</b>",
            reply_markup=keyboard
        )
        await callback.answer()

    elif data.startswith("start_adv_"):
        # –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
        location_name = data[len("start_adv_"):]
        location = LOCATIONS.get(location_name)

        if not location:
            await callback.answer("‚ùó –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        existing_status = supabase.table("adventure_status").select("*").eq("user_id", user_id).execute()
        now = datetime.utcnow()
        if existing_status.data:
            end_time_str = existing_status.data[0]["end_time"]
            end_time = datetime.fromisoformat(end_time_str)
            if end_time > now:
                remaining = (end_time - now).seconds
                await callback.answer(f"‚è≥ –¢—ã —É–∂–µ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫.", show_alert=True)
                return
            else:
                supabase.table("adventure_status").delete().eq("user_id", user_id).execute()

        duration = location["duration"]
        end_time = now + timedelta(seconds=duration)
        adventure = ADVENTURES.get(location_name)
        mob = random.choice(adventure["mobs"])
        exp = random.randint(*location["exp"])
        money = random.randint(*location["money"])

        try:
            await callback.message.delete()
        except:
            pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        supabase.table("adventure_status").upsert({
            "user_id": user_id,
            "location": location_name,
            "end_time": end_time.isoformat()
        }).execute()

        await bot.send_message(
            user_id,
            f"üèÉ‚Äç‚ôÇÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ <b>{location_name}</b>\n"
            f"üëæ –í—Å—Ç—Ä–µ—Ç–∏–ª: <b>{mob}</b>\n"
            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration} —Å–µ–∫.</b>"
        )

        await asyncio.sleep(duration)

        user_data = supabase.table("users").select("money").eq("user_id", user_id).execute()
        current_money = user_data.data[0]["money"] if user_data.data else 0
        await add_experience(user_id, exp)
        supabase.table("users").update({
            "money": current_money + money
        }).eq("user_id", user_id).execute()

        supabase.table("adventure_status").delete().eq("user_id", user_id).execute()

        await bot.send_message(
            user_id,
            f"‚úÖ <b>–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üèûÔ∏è –õ–æ–∫–∞—Ü–∏—è: <b>{location_name}</b>\n"
            f"‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω –≤—Ä–∞–≥: <b>{mob}</b>\n\n"
            f"üéñ –û–ø—ã—Ç: <b>{exp}</b>\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{money}</b>",
            reply_markup=main_menu_kb
        )

        await callback.answer()

    elif data == "back_to_adventures":
        buttons = [
            [InlineKeyboardButton(text=f"{name} {emoji}", callback_data=f"adventure_{name}")]
            for name, emoji in zip(ADVENTURES.keys(), ["üå≤", "üèöÔ∏è", "üè∞"])
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("üåç <b>–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:</b>", reply_markup=keyboard)
        await callback.answer()

    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)



# ---------- Run bot ----------
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
