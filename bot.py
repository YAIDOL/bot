import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# ---------- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø TOKEN ----------
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –π–æ–≥–æ —É Render ‚Üí Environment Variables")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- –ë–ê–ó–ê –î–ê–ù–ò–• ----------
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    status TEXT DEFAULT '–ò–≥—Ä–æ–∫',
    level INTEGER DEFAULT 1,
    exp INTEGER DEFAULT 0,
    exp_max INTEGER DEFAULT 100,
    health INTEGER DEFAULT 100,
    defense INTEGER DEFAULT 10,
    attack INTEGER DEFAULT 50,
    money INTEGER DEFAULT 0,
    diamonds INTEGER DEFAULT 0,
    head TEXT DEFAULT '–Ω–µ—Ç',
    body TEXT DEFAULT '–Ω–µ—Ç',
    legs TEXT DEFAULT '–Ω–µ—Ç',
    feet TEXT DEFAULT '–Ω–µ—Ç',
    weapon TEXT DEFAULT '–Ω–µ—Ç',
    bag TEXT DEFAULT '–Ω–µ—Ç'
)
""")
conn.commit()

waiting_for_nick = set()

# ---------- –ö–õ–ê–í–Ü–ê–¢–£–†–ò ----------
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="ü™® –ö—Ä–∞—Ñ—Ç")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí™ –ú–æ–π –∫–ª–∞–Ω"),
         KeyboardButton(text="üèÜ –¢–æ–ø"), KeyboardButton(text="üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è")],
    ],
    resize_keyboard=True
)

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row and row[0]:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{row[0]}</b>! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_menu_kb)
    else:
        waiting_for_nick.add(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

# ---------- –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ----------
@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # ----- –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∏–∫–∞ -----
    if user_id in waiting_for_nick:
        nickname = text
        if len(nickname) < 3:
            await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        cursor.execute("""
            INSERT OR REPLACE INTO users (user_id, username)
            VALUES (?, ?)
        """, (user_id, nickname))
        conn.commit()
        waiting_for_nick.remove(user_id)
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, <b>{nickname}</b>! –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=main_menu_kb)
        return

    # ----- –ü–†–û–§–Ü–õ–¨ -----
    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            (
                _id, username, status, level, exp, exp_max,
                health, defense, attack, money, diamonds,
                head, body, legs, feet, weapon, bag
            ) = row

            profile_text = (
                f"<b>{username}</b> | <code>{user_id}</code>\n"
                f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {status}\n\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {level}\n"
                f"–û–ø—ã—Ç: {exp} / {exp_max}\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ‚ù§Ô∏è{health} | üõ°{defense} | üó°{attack}\n\n"
                f"ü™ô –ë–∞–ª–∞–Ω—Å:\n"
                f"–î–µ–Ω—å–≥–∏: {money} üí∞\n"
                f"–ê–ª–º–∞–∑—ã: {diamonds} üíé\n\n"
                f"ü•ã –û–¥–µ–∂–¥–∞:\n"
                f"–ì–æ–ª–æ–≤–∞: {head}\n"
                f"–¢–µ–ª–æ: {body}\n"
                f"–ù–æ–≥–∏: {legs}\n"
                f"–°—Ç—É–ø–Ω–∏: {feet}\n\n"
                f"ü™õ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
                f"–û—Ä—É–∂–∏–µ: {weapon}\n\n"
                f"üß∞ –°—É–º–∫–∞:\n"
                f"{bag}"
            )
            await message.answer(profile_text, reply_markup=main_menu_kb)
        else:
            waiting_for_nick.add(user_id)
            await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")

    # ----- –¢–û–ü -----
    elif text == "üèÜ –¢–æ–ø":
        cursor.execute("SELECT username FROM users")
        players = cursor.fetchall()
        if players:
            players_list = "\n".join(f"{i+1}. {name[0]}" for i, name in enumerate(players))
            await message.answer(f"üèÜ <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n{players_list}", reply_markup=main_menu_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=main_menu_kb)

    # ----- –ü–†–û–°–¢–Ü –ö–ù–û–ü–ö–ò -----
    elif text in ["üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "ü™® –ö—Ä–∞—Ñ—Ç", "üí™ –ú–æ–π –∫–ª–∞–Ω", "üõçÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è"]:
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{text}</b>", reply_markup=main_menu_kb)

    else:
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.", reply_markup=main_menu_kb)

# ---------- –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–°–Ü–ú –ü–†–ò –°–¢–ê–†–¢–Ü ----------
async def notify_users_on_start():
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for (user_id,) in users:
        try:
            await bot.send_message(user_id, "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î ‚úÖ")
        except Exception:
            pass  # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞

# ---------- –û–°–ù–û–í–ù–ò–ô –ó–ê–ü–£–°–ö ----------
async def main():
    await notify_users_on_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
